[{"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskItem.tsx":"1","/home/alexandr/ToDoList/alexandr-testwork/src/api/api.ts":"2","/home/alexandr/ToDoList/alexandr-testwork/src/components/Icon.tsx":"3","/home/alexandr/ToDoList/alexandr-testwork/src/utils/icons.ts":"4","/home/alexandr/ToDoList/alexandr-testwork/src/utils/colors.ts":"5","/home/alexandr/ToDoList/alexandr-testwork/src/redux/store.ts":"6","/home/alexandr/ToDoList/alexandr-testwork/src/redux/reducers/reducer.ts":"7","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.tsx":"8","/home/alexandr/ToDoList/alexandr-testwork/src/redux/actions.ts":"9","/home/alexandr/ToDoList/alexandr-testwork/src/redux/selectors/selectors.ts":"10","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskListWrapper.tsx":"11","/home/alexandr/ToDoList/alexandr-testwork/src/utils/QueryParams.ts":"12","/home/alexandr/ToDoList/alexandr-testwork/src/index.tsx":"13","/home/alexandr/ToDoList/alexandr-testwork/src/App.tsx":"14","/home/alexandr/ToDoList/alexandr-testwork/src/utils/routes.ts":"15","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskList.tsx":"16","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.tsx":"17","/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.tsx":"18","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.styles.ts":"19","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.styles.ts":"20","/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.styles.ts":"21","/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoriesList.tsx":"22","/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoryCreator.tsx":"23","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.tsx":"24","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.styles.ts":"25","/home/alexandr/ToDoList/alexandr-testwork/src/components/Category.tsx":"26","/home/alexandr/ToDoList/alexandr-testwork/src/components/Categories.styles.ts":"27","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskListWrapper.styles.ts":"28","/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.styles.ts":"29","/home/alexandr/ToDoList/alexandr-testwork/src/components/Filter.tsx":"30","/home/alexandr/ToDoList/alexandr-testwork/src/hooks/ListHook.tsx":"31","/home/alexandr/ToDoList/alexandr-testwork/src/components/Preloader/Preloader.tsx":"32","/home/alexandr/ToDoList/alexandr-testwork/src/components/Preloader/Preloader.styles.ts":"33","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskButton.ts":"34","/home/alexandr/ToDoList/alexandr-testwork/src/utils/navTabs.ts":"35","/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.tsx":"36","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskList.styles.ts":"37","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskItem.styles.ts":"38","/home/alexandr/ToDoList/alexandr-testwork/src/utils/validators/validators.ts":"39","/home/alexandr/ToDoList/alexandr-testwork/src/components/Filter.styles.ts":"40"},{"size":4749,"mtime":1623074663717,"results":"41","hashOfConfig":"42"},{"size":2273,"mtime":1623072997376,"results":"43","hashOfConfig":"42"},{"size":506,"mtime":1622197963596,"results":"44","hashOfConfig":"42"},{"size":121,"mtime":1622198358965,"results":"45","hashOfConfig":"42"},{"size":123,"mtime":1622197164279,"results":"46","hashOfConfig":"42"},{"size":750,"mtime":1622625475667,"results":"47","hashOfConfig":"42"},{"size":5559,"mtime":1622448352557,"results":"48","hashOfConfig":"42"},{"size":3298,"mtime":1622454385408,"results":"49","hashOfConfig":"42"},{"size":4721,"mtime":1622627845824,"results":"50","hashOfConfig":"42"},{"size":837,"mtime":1622725928989,"results":"51","hashOfConfig":"42"},{"size":3846,"mtime":1623054588874,"results":"52","hashOfConfig":"42"},{"size":304,"mtime":1622445745485,"results":"53","hashOfConfig":"42"},{"size":296,"mtime":1622448379855,"results":"54","hashOfConfig":"42"},{"size":452,"mtime":1622448391587,"results":"55","hashOfConfig":"42"},{"size":504,"mtime":1622448584083,"results":"56","hashOfConfig":"42"},{"size":1998,"mtime":1622720057168,"results":"57","hashOfConfig":"42"},{"size":2977,"mtime":1623073072521,"results":"58","hashOfConfig":"42"},{"size":2078,"mtime":1623058210033,"results":"59","hashOfConfig":"42"},{"size":1315,"mtime":1622454324798,"results":"60","hashOfConfig":"42"},{"size":331,"mtime":1623061047454,"results":"61","hashOfConfig":"42"},{"size":337,"mtime":1622458051648,"results":"62","hashOfConfig":"42"},{"size":928,"mtime":1623069743716,"results":"63","hashOfConfig":"42"},{"size":4812,"mtime":1623050727390,"results":"64","hashOfConfig":"42"},{"size":3116,"mtime":1623072030542,"results":"65","hashOfConfig":"42"},{"size":146,"mtime":1622452895273,"results":"66","hashOfConfig":"42"},{"size":3687,"mtime":1623072033718,"results":"67","hashOfConfig":"42"},{"size":1137,"mtime":1622454420023,"results":"68","hashOfConfig":"42"},{"size":321,"mtime":1622458387461,"results":"69","hashOfConfig":"42"},{"size":414,"mtime":1623065566090,"results":"70","hashOfConfig":"42"},{"size":2724,"mtime":1623073505090,"results":"71","hashOfConfig":"42"},{"size":961,"mtime":1622725963493,"results":"72","hashOfConfig":"42"},{"size":346,"mtime":1622643821189,"results":"73","hashOfConfig":"42"},{"size":242,"mtime":1622465930572,"results":"74","hashOfConfig":"42"},{"size":203,"mtime":1623060077524,"results":"75","hashOfConfig":"42"},{"size":259,"mtime":1622538070576,"results":"76","hashOfConfig":"42"},{"size":517,"mtime":1623060361963,"results":"77","hashOfConfig":"42"},{"size":143,"mtime":1623060917777,"results":"78","hashOfConfig":"42"},{"size":282,"mtime":1623060839548,"results":"79","hashOfConfig":"42"},{"size":194,"mtime":1622535476905,"results":"80","hashOfConfig":"42"},{"size":207,"mtime":1623073600332,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"jepx49",{"filePath":"84","messages":"85","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"87"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"87"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"87"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"87"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"87"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"87"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"87"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"87"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"87"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskItem.tsx",["174"],"/home/alexandr/ToDoList/alexandr-testwork/src/api/api.ts",["175","176","177","178","179","180","181","182","183","184","185"],"import axios from 'axios';\nimport { TaskType } from '../components/TaskItem';\nimport {\n  CategoryDataType,\n  CategoryType,\n  NewCategoryParamsType,\n  newTaskParamsType,\n  ParamsType,\n  updateCategoryParamsType,\n  UpdateCategoryParamsType,\n  UpdateTaskType,\n} from '../types/types';\n\nconst instance = axios.create({\n  withCredentials: true,\n  baseURL: 'http://localhost:3000',\n});\nconsole.log(process.env);\n\nconst limit = process.env.REACT_APP_TASK_LIMIT;\n\nexport type Colors = 'yellowgreen' | 'yellow' | 'black' | '';\nexport type Icons = 'pets' | 'home' | 'nightlight_round' | '';\n\nexport const API = {\n  getTasks: (Params: ParamsType) =>\n    instance\n      .get<Array<TaskType>>(\n        `tasks?date_gte=${Params.dateFrom}&date_lte=${Params.dateTo}&${Params.searchString}&isDone=${Params.isListDone}&_start=0&_end=${Params.end}&_limit=${limit}`\n      )\n      .then((response) => response.data),\n\n  deleteTask(id: number) {\n    instance.delete(`/tasks/${id}`);\n  },\n\n  addTask: (newTaskParams: newTaskParamsType) =>\n    instance.post<TaskType>('/tasks/', newTaskParams),\n\n  updateTask: (updateTaskParams: UpdateTaskType) => {\n    instance.patch<CategoryType>(`/tasks/${updateTaskParams.id}`, {\n      title: updateTaskParams.title,\n      isDone: updateTaskParams.isDone,\n      isFavorite: updateTaskParams.isFavorite,\n    });\n  },\n\n  updateCategoryText: (updateCategoryParams: updateCategoryParamsType) => {\n    instance.patch<CategoryType>(`/categories/${updateCategoryParams.id}`, {\n      name: updateCategoryParams.name,\n    });\n  },\n\n  getCategories: () =>\n    instance\n      .get<Array<CategoryType>>('/categories')\n      .then((response) => response.data),\n\n  getDefaultCategory: () =>\n    instance\n      .get<CategoryDataType>('/defaultCategory')\n      .then((response) => response.data.id),\n\n  deleteCategory: (id: number) => instance.delete(`/categories/${id}`),\n\n  updateCategory: ({ id, icon, color }: UpdateCategoryParamsType) => {\n    instance.patch<CategoryType>(`/categories/${id}`, { icon, color });\n  },\n\n  updateDefaultCategory: (id: number | undefined) => {\n    instance.put<CategoryType>('/defaultCategory', { id });\n  },\n\n  addCategory: (newCategoryParams: NewCategoryParamsType) =>\n    instance.post<CategoryType>('/categories', newCategoryParams),\n};\n",["186","187"],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Icon.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/icons.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/colors.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/redux/store.ts",["188"],"import { createStore, applyMiddleware, Action } from 'redux';\nimport { reducer } from './reducers/reducer';\nimport thunkMiddleWare, { ThunkAction } from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\ntype RootReducerType = typeof reducer;\nexport type AppStateType = ReturnType<RootReducerType>;\n\nexport type InferActionsTypes<T> = T extends {\n  [keys: string]: (...args: any[]) => infer U;\n}\n  ? U\n  : never;\n\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> =\n  ThunkAction<R, AppStateType, unknown, A>;\n\n/* export const store = createStore(reducer, applyMiddleware(thunkMiddleWare)); */\n\nexport const store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunkMiddleWare))\n);\n","/home/alexandr/ToDoList/alexandr-testwork/src/redux/reducers/reducer.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.tsx",["189"],"import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Select } from '@material-ui/core';\nimport { Icon } from '../components/Icon';\nimport { CategoriesList } from '../components/CategoriesList';\nimport { CategoryCreator } from '../components/CategoryCreator';\nimport {\n  getCategoriesFromState,\n  selectDefaultCategoryId,\n} from '../redux/selectors/selectors';\nimport {\n  actions,\n  getCategories,\n  getDefaultCategory,\n  updateDefaultCategory,\n} from '../redux/actions';\nimport useStyles from './Settings.styles';\nimport { Colors, Icons } from '../api/api';\n\nexport const Settings: React.FC = () => {\n  const classes = useStyles();\n  const categories = useSelector(getCategoriesFromState);\n  const categoryId = useSelector(selectDefaultCategoryId);\n  const [category, setCategory] = useState<number | null>(categoryId);\n  const [opened, setOpened] = useState<boolean>(false);\n  const [edit, setEdit] = useState(false);\n  const [editCategoryId, setEditCategoryId] = useState<number | null>(null);\n  const [button, setButton] = useState<Colors>('black');\n  const [choosesIcon, setChoosesIcon] = useState<Icons>('home');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCategories());\n    dispatch(getDefaultCategory());\n  }, []);\n\n  useEffect(() => {\n    setCategory(categoryId);\n  }, [categoryId]);\n\n  const onOpen = () => {\n    setOpened(true);\n  };\n  const onClose = () => {\n    setOpened(false);\n  };\n\n  const handleChangeCategory = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    dispatch(actions.setCategory(event.target.value as number));\n    dispatch(updateDefaultCategory(event.target.value as number));\n  };\n\n  return (\n    <div>\n      <h1 className={classes.SettingsMainTitle}>Settings</h1>\n      <div className={classes.SettingsPageContainer}>\n        <div>\n          <h2>{edit ? 'Edit Icon' : 'Categories Maker'}</h2>\n          <CategoryCreator\n            edit={edit}\n            editCategoryId={editCategoryId}\n            setEditCategoryId={setEditCategoryId}\n            setEdit={setEdit}\n            setButton={setButton}\n            setChoosesIcon={setChoosesIcon}\n            button={button}\n            choosesIcon={choosesIcon}\n          />\n        </div>\n        <div className={classes.SettingsPageCategories}>\n          <div>\n            <h2>Categories</h2>\n          </div>\n          <CategoriesList\n            categories={categories}\n            setEdit={setEdit}\n            setEditCategoryId={setEditCategoryId}\n            editCategoryId={editCategoryId}\n            setButton={setButton}\n            setChoosesIcon={setChoosesIcon}\n          />\n          <h4>Default category: </h4>\n\n          <Select\n            onOpen={onOpen}\n            onClose={onClose}\n            onChange={handleChangeCategory}\n            value={category}\n          >\n            {categories.map(({ id, color, icon, name }) => (\n              <MenuItem key={id} value={id}>\n                <>\n                  <Icon color={color} icon={icon} />\n                  {opened && name}\n                </>\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/redux/actions.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/redux/selectors/selectors.ts",["190","191","192","193","194","195","196","197","198","199"],"import { AppStateType } from '../store';\n\nexport const getTasksFromState = (state: AppStateType) => state.unDoneTasks;\nexport const getDoneTasksFromState = (state: AppStateType) => state.doneTasks;\n\nexport const getNewTaskText = (state: AppStateType) => state.newTaskText;\n\nexport const getChangedTaskText = (state: AppStateType) =>\n  state.changedTaskText;\nexport const getChangedCategoryText = (state: AppStateType) =>\n  state.changedCategoryText;\nexport const getCategoriesFromState = (state: AppStateType) => state.categories;\nexport const getIsFetching = (state: AppStateType) => state.isFetching;\nexport const selectDefaultCategoryId = (state: AppStateType) =>\n  state.categoryId;\nexport const getCategoriesName = (state: AppStateType) => state.categoriesName;\nexport const getEndNumber = (state: AppStateType) => state.endNumber;\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskListWrapper.tsx",["200","201"],"import React, { useEffect, useState } from 'react';\nimport { TaskList } from './TaskList';\nimport ListHook from '../hooks/ListHook';\nimport { useSelector } from 'react-redux';\nimport { getIsFetching } from '../redux/selectors/selectors';\nimport { useLocation } from 'react-router-dom';\nimport queryString from 'query-string';\nimport QueryParams from '../utils/QueryParams';\nimport { getTasks } from '../redux/actions';\nimport { useStyles } from './TaskListWrapper.styles';\nimport Filter from './Filter';\nimport Preloader from './Preloader/Preloader';\nimport { DateType } from '@date-io/type';\n\ntype ListWrapperType = {\n  isListDone: boolean;\n  selectedDateFrom: DateType | null;\n  selectedDateTo: DateType | null;\n};\n\nexport const ListWrapper: React.FC<ListWrapperType> = ({\n  isListDone,\n  selectedDateFrom,\n  selectedDateTo,\n}) => {\n  const classes = useStyles();\n  const isFetching = useSelector(getIsFetching);\n  const locationPath = useLocation();\n  const parsed = queryString.parse(window.location.search);\n  const [categoryId, setCategoryId] = useState<string | string[] | null>(() => {\n    return parsed.categoryId;\n  });\n\n  const [dateSort, setDateSort] = useState<boolean>(() => {\n    return parsed._sort === ('isFavorite,date' || 'isFavorite,date,title');\n  });\n  const [nameSort, setNameSort] = useState<boolean>(() => {\n    return parsed._sort === ('isFavorite,title' || 'isFavorite,date,title');\n  });\n\n  const { categories, tasks, history, endNumber, unDoneTasks, dispatch } =\n    ListHook();\n\n  const [end, setEnd] = useState<number>(endNumber);\n\n  const dateFrom = selectedDateFrom\n    ? selectedDateFrom.valueOf() - 43150000\n    : 1577836800000;\n  const dateTo = selectedDateTo\n    ? selectedDateTo.valueOf() + 43150000\n    : 1640995200000;\n\n  const onDateSortChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDateSort(e.target.checked);\n  };\n  const onNameSortChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNameSort(e.target.checked);\n  };\n\n  useEffect(() => {\n    switch (parsed._sort) {\n      case 'isFavorite,date': {\n        setDateSort(true);\n        QueryParams._sort[1] = 'date';\n        QueryParams._order[1] = 'asc';\n        break;\n      }\n      case 'isFavorite,title': {\n        setNameSort(true);\n        QueryParams._sort[2] = 'title';\n        QueryParams._order[2] = 'asc';\n        break;\n      }\n      case 'isFavorite,date,title': {\n        setDateSort(true);\n        QueryParams._sort[1] = 'date';\n        QueryParams._order[1] = 'asc';\n        setNameSort(true);\n        QueryParams._sort[2] = 'title';\n        QueryParams._order[2] = 'asc';\n        break;\n      }\n      default:\n        break;\n    }\n  }, []);\n\n  useEffect(() => {\n    QueryParams._sort[1] = dateSort ? 'date' : null;\n    QueryParams._sort[2] = nameSort ? 'title' : null;\n    QueryParams._order[1] = dateSort ? 'asc' : null;\n    QueryParams._order[2] = nameSort ? 'asc' : null;\n    QueryParams.categoryId = categoryId;\n\n    const searchString = queryString.stringify(QueryParams, {\n      skipNull: true,\n      arrayFormat: 'comma',\n    });\n\n    history.push({\n      pathname: locationPath.pathname,\n      search: searchString,\n    });\n\n    dispatch(getTasks({ isListDone, end, searchString, dateFrom, dateTo }));\n  }, [dateSort, nameSort, categoryId, end, dateFrom, dateTo]);\n  return (\n    <div className={classes.AppCategoryChanger}>\n      <Filter\n        onDateSortChange={onDateSortChange}\n        onNameSortChange={onNameSortChange}\n        dateSort={dateSort}\n        nameSort={nameSort}\n        categoryId={categoryId}\n        setCategoryId={setCategoryId}\n      />\n      {isFetching ? <Preloader /> : null}\n      <TaskList\n        tasks={!isListDone ? unDoneTasks : tasks}\n        end={end}\n        setEnd={setEnd}\n        categories={categories}\n        isListDone={isListDone}\n      />\n    </div>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/utils/QueryParams.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/index.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/App.tsx",["202"],"import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { AppNavbar } from './AppNavbar';\nimport { routes } from './utils/routes';\n\nconst App = () => (\n  <Router>\n    <AppNavbar />\n    <div>\n      <Switch>\n        {routes.map(({ path, Component }) => (\n          <Route key={path} exact path={path} component={Component} />\n        ))}\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","/home/alexandr/ToDoList/alexandr-testwork/src/utils/routes.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskList.tsx",["203","204"],"import React, { useEffect, useState } from 'react';\nimport { Grid } from '@material-ui/core';\nimport TaskItem, { TaskType } from './TaskItem';\nimport FlipMove from 'react-flip-move';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { CategoryType } from '../types/types';\nimport Preloader from './Preloader/Preloader';\nimport { useStyles } from './TaskList.styles';\n\ntype PropsType = {\n  tasks: Array<TaskType>;\n  end: number;\n  setEnd: (end: number) => void;\n  categories: CategoryType[];\n  isListDone: boolean;\n};\n\nexport const TaskList: React.FC<PropsType> = ({\n  tasks,\n  end,\n  setEnd,\n  categories,\n  isListDone,\n}) => {\n  const [hasMore, setHasMore] = useState<boolean>(true);\n  const [tasksLength, setTasksLength] = useState<number>(0);\n  const [sortTasks, setSortTasks] = useState<TaskType[]>(tasks);\n  const classes = useStyles();\n\n  useEffect(() => {\n    setSortTasks(\n      tasks\n        .filter((task) => task.isDone === isListDone)\n        .sort((a) => (a.isFavorite ? -1 : 1))\n    );\n  }, [tasks]);\n\n  useEffect(() => {\n    end <= tasks.length ? setHasMore(true) : setHasMore(false);\n    setTasksLength(tasks.length);\n  }, [tasks.length, end]);\n  return (\n    <>\n      <div className={classes.listScroll}>\n        <InfiniteScroll\n          dataLength={tasksLength}\n          next={() => setEnd(end + 4)}\n          hasMore={hasMore}\n          loader={<Preloader />}\n          endMessage={\n            <p style={{ textAlign: 'center' }}>\n              <b>You have seen it all</b>\n            </p>\n          }\n        >\n          <FlipMove>\n            {sortTasks.map((task) => {\n              return (\n                <TaskItem\n                  key={task.id}\n                  task={task}\n                  isListDone={isListDone}\n                  setEnd={setEnd}\n                  end={end}\n                  categories={categories}\n                />\n              );\n            })}\n          </FlipMove>\n        </InfiniteScroll>\n      </div>\n    </>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoriesList.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoryCreator.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Category.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Categories.styles.ts",["205","206"],"import { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nconst theme = createMuiTheme({\n  breakpoints: {\n    values: {\n      xs: 340,\n      sm: 650,\n      md: 960,\n      lg: 1280,\n      xl: 1920,\n    },\n  },\n});\n\nexport const useStyles = makeStyles({\n  CategoryPageContainer: {\n    minHeight: '48px',\n    minWidth: '200px',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    flexDirection: 'column',\n    [theme.breakpoints.up('xs')]: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n  },\n  CategoryParams: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '300px',\n  },\n  CategoryTitle: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  categoryTitleWithEdit: {\n    display: 'flex',\n    justifyContent: 'center',\n    '&:hover': {\n      cursor: 'pointer',\n      textDecoration: 'underline',\n    },\n  },\n  CategoryParamsName: {\n    marginLeft: '10px',\n  },\n  CategoryPageRow: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n});\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskListWrapper.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Filter.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/hooks/ListHook.tsx",["207","208"],"import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getTasksFromState,\n  getCategoriesFromState,\n  getIsFetching,\n  getEndNumber,\n  getDoneTasksFromState,\n} from '../redux/selectors/selectors';\nimport { getDefaultCategory, getCategories } from '../redux/actions';\nimport { useHistory } from 'react-router-dom';\n\nconst ListHook = () => {\n  const history = useHistory();\n\n  const dispatch = useDispatch();\n  const tasks = useSelector(getDoneTasksFromState);\n\n  const unDoneTasks = useSelector(getTasksFromState);\n  const categories = useSelector(getCategoriesFromState);\n  const isFetching = useSelector(getIsFetching);\n  const endNumber = useSelector(getEndNumber);\n\n  useEffect(() => {\n    dispatch(getCategories());\n    dispatch(getDefaultCategory());\n  }, []);\n\n  return {\n    tasks,\n    unDoneTasks,\n    categories,\n    isFetching,\n    dispatch,\n    endNumber,\n    history,\n  };\n};\n\nexport default ListHook;\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/Preloader/Preloader.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Preloader/Preloader.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskButton.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/navTabs.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.tsx",["209"],"import React from 'react';\nimport { useStyles } from './AppNavbar.styles';\nimport { NavLink } from 'react-router-dom';\nimport { navTabs } from './utils/navTabs';\n\nexport const AppNavbar = () => {\n  const classes = useStyles();\n\n  return (\n    <nav className={classes.navbar}>\n      <div className={classes.navbar_wrap}>\n        {navTabs.map(({ to, title }) => (\n          <NavLink className={classes.navbar_links} to={to} key={to}>\n            {title}\n          </NavLink>\n        ))}\n      </div>\n    </nav>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskList.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskItem.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/validators/validators.ts",[],["210","211"],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Filter.styles.ts",[],{"ruleId":"212","severity":1,"message":"213","line":114,"column":40,"nodeType":"214","messageId":"215","endLine":114,"endColumn":42},{"ruleId":"216","severity":1,"message":"217","line":26,"column":13,"nodeType":"214","messageId":"218","endLine":26,"endColumn":36},{"ruleId":"216","severity":1,"message":"217","line":33,"column":3,"nodeType":"219","messageId":"218","endLine":33,"endColumn":25},{"ruleId":"216","severity":1,"message":"217","line":37,"column":12,"nodeType":"214","messageId":"218","endLine":37,"endColumn":49},{"ruleId":"216","severity":1,"message":"217","line":40,"column":15,"nodeType":"214","messageId":"218","endLine":40,"endColumn":52},{"ruleId":"216","severity":1,"message":"217","line":48,"column":23,"nodeType":"214","messageId":"218","endLine":48,"endColumn":74},{"ruleId":"216","severity":1,"message":"217","line":54,"column":18,"nodeType":"214","messageId":"218","endLine":54,"endColumn":23},{"ruleId":"216","severity":1,"message":"217","line":59,"column":23,"nodeType":"214","messageId":"218","endLine":59,"endColumn":28},{"ruleId":"216","severity":1,"message":"217","line":64,"column":19,"nodeType":"214","messageId":"218","endLine":64,"endColumn":34},{"ruleId":"216","severity":1,"message":"217","line":66,"column":19,"nodeType":"214","messageId":"218","endLine":66,"endColumn":69},{"ruleId":"216","severity":1,"message":"217","line":70,"column":26,"nodeType":"214","messageId":"218","endLine":70,"endColumn":53},{"ruleId":"216","severity":1,"message":"217","line":74,"column":16,"nodeType":"214","messageId":"218","endLine":74,"endColumn":61},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","severity":1,"message":"225","line":10,"column":29,"nodeType":"226","messageId":"227","endLine":10,"endColumn":32,"suggestions":"228"},{"ruleId":"229","severity":1,"message":"230","line":37,"column":6,"nodeType":"231","endLine":37,"endColumn":8,"suggestions":"232"},{"ruleId":"216","severity":1,"message":"217","line":3,"column":34,"nodeType":"214","messageId":"218","endLine":3,"endColumn":58},{"ruleId":"216","severity":1,"message":"217","line":4,"column":38,"nodeType":"214","messageId":"218","endLine":4,"endColumn":62},{"ruleId":"216","severity":1,"message":"217","line":6,"column":31,"nodeType":"214","messageId":"218","endLine":6,"endColumn":55},{"ruleId":"216","severity":1,"message":"217","line":8,"column":35,"nodeType":"214","messageId":"218","endLine":8,"endColumn":59},{"ruleId":"216","severity":1,"message":"217","line":10,"column":39,"nodeType":"214","messageId":"218","endLine":10,"endColumn":63},{"ruleId":"216","severity":1,"message":"217","line":12,"column":39,"nodeType":"214","messageId":"218","endLine":12,"endColumn":63},{"ruleId":"216","severity":1,"message":"217","line":13,"column":30,"nodeType":"214","messageId":"218","endLine":13,"endColumn":54},{"ruleId":"216","severity":1,"message":"217","line":14,"column":40,"nodeType":"214","messageId":"218","endLine":14,"endColumn":64},{"ruleId":"216","severity":1,"message":"217","line":16,"column":34,"nodeType":"214","messageId":"218","endLine":16,"endColumn":58},{"ruleId":"216","severity":1,"message":"217","line":17,"column":29,"nodeType":"214","messageId":"218","endLine":17,"endColumn":53},{"ruleId":"229","severity":1,"message":"233","line":86,"column":6,"nodeType":"231","endLine":86,"endColumn":8,"suggestions":"234"},{"ruleId":"229","severity":1,"message":"235","line":106,"column":6,"nodeType":"231","endLine":106,"endColumn":61,"suggestions":"236"},{"ruleId":"216","severity":1,"message":"217","line":6,"column":13,"nodeType":"214","messageId":"218","endLine":6,"endColumn":18},{"ruleId":"237","severity":1,"message":"238","line":2,"column":10,"nodeType":"239","messageId":"240","endLine":2,"endColumn":14},{"ruleId":"229","severity":1,"message":"241","line":36,"column":6,"nodeType":"231","endLine":36,"endColumn":13,"suggestions":"242"},{"ruleId":"237","severity":1,"message":"243","line":1,"column":22,"nodeType":"239","messageId":"240","endLine":1,"endColumn":32},{"ruleId":"237","severity":1,"message":"244","line":2,"column":8,"nodeType":"239","messageId":"240","endLine":2,"endColumn":14},{"ruleId":"216","severity":1,"message":"217","line":13,"column":18,"nodeType":"214","messageId":"218","endLine":13,"endColumn":23},{"ruleId":"229","severity":1,"message":"230","line":27,"column":6,"nodeType":"231","endLine":27,"endColumn":8,"suggestions":"245"},{"ruleId":"216","severity":1,"message":"217","line":6,"column":26,"nodeType":"214","messageId":"218","endLine":6,"endColumn":31},{"ruleId":"220","replacedBy":"246"},{"ruleId":"222","replacedBy":"247"},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","missingReturnType","FunctionExpression","no-native-reassign",["248"],"no-negated-in-lhs",["249"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["250","251"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["252"],"React Hook useEffect has a missing dependency: 'parsed._sort'. Either include it or remove the dependency array.",["253"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'isListDone', and 'locationPath.pathname'. Either include them or remove the dependency array.",["254"],"@typescript-eslint/no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'isListDone'. Either include it or remove the dependency array. If 'setSortTasks' needs the current value of 'isListDone', you can also switch to useReducer instead of useState and read 'isListDone' in the reducer.",["255"],"'withStyles' is defined but never used.","'Button' is defined but never used.",["256"],["248"],["249"],"no-global-assign","no-unsafe-negation",{"messageId":"257","fix":"258","desc":"259"},{"messageId":"260","fix":"261","desc":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"263","fix":"271"},"suggestUnknown",{"range":"272","text":"273"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"272","text":"274"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.","Update the dependencies array to be: [dispatch]",{"range":"275","text":"276"},"Update the dependencies array to be: [parsed._sort]",{"range":"277","text":"278"},"Update the dependencies array to be: [dateSort, nameSort, categoryId, end, dateFrom, dateTo, history, locationPath.pathname, dispatch, isListDone]",{"range":"279","text":"280"},"Update the dependencies array to be: [isListDone, tasks]",{"range":"281","text":"282"},{"range":"283","text":"276"},[404,407],"unknown","never",[1361,1363],"[dispatch]",[2670,2672],"[parsed._sort]",[3249,3304],"[dateSort, nameSort, categoryId, end, dateFrom, dateTo, history, locationPath.pathname, dispatch, isListDone]",[1024,1031],"[isListDone, tasks]",[808,810]]