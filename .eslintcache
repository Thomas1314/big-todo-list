[{"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\index.js":"1","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\App.js":"2","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\redux\\store.js":"3","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\appStyle.js":"4","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\utils\\links.js":"5","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\redux\\reducers\\reducer.js":"6","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\pages\\CompletedTasks\\CompletedTasks.js":"7","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\pages\\Main\\Main.js":"8","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\pages\\CompletedTasks\\CompletedTasksStyles.js":"9","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\pages\\Main\\MainStyles.js":"10","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\List\\List.js":"11","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\TaskInput\\TaskInput.js":"12","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\ListWrapper\\ListWrapper.js":"13","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\redux\\actions.js":"14","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\TaskInput\\TaskInputStyles.js":"15","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\hooks\\ListHook.js":"16","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\TaskItem\\TaskItem.js":"17","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\redux\\selectors\\selectors.js":"18","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\Icon\\icon.js":"19","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\api\\api.js":"20","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\TaskItem\\taskButton.js":"21","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\pages\\Settings\\Settings.js":"22","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\pages\\Settings\\SettingsStyles.js":"23","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\Categories\\CategoriesList.jsx":"24","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\Categories\\Category.jsx":"25","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\Categories\\CategoryStyles.jsx":"26"},{"size":306,"mtime":1621455250076,"results":"27","hashOfConfig":"28"},{"size":995,"mtime":1621510688509,"results":"29","hashOfConfig":"28"},{"size":201,"mtime":1621455250081,"results":"30","hashOfConfig":"28"},{"size":466,"mtime":1621455250069,"results":"31","hashOfConfig":"28"},{"size":239,"mtime":1621506449704,"results":"32","hashOfConfig":"28"},{"size":4635,"mtime":1621518988446,"results":"33","hashOfConfig":"28"},{"size":2464,"mtime":1621455250077,"results":"34","hashOfConfig":"28"},{"size":3627,"mtime":1621496898724,"results":"35","hashOfConfig":"28"},{"size":262,"mtime":1621455250077,"results":"36","hashOfConfig":"28"},{"size":511,"mtime":1621455250078,"results":"37","hashOfConfig":"28"},{"size":929,"mtime":1621497042405,"results":"38","hashOfConfig":"28"},{"size":3255,"mtime":1621499359025,"results":"39","hashOfConfig":"28"},{"size":466,"mtime":1621496860152,"results":"40","hashOfConfig":"28"},{"size":3044,"mtime":1621518599307,"results":"41","hashOfConfig":"28"},{"size":148,"mtime":1621455250072,"results":"42","hashOfConfig":"28"},{"size":816,"mtime":1621456131686,"results":"43","hashOfConfig":"28"},{"size":3909,"mtime":1621497218971,"results":"44","hashOfConfig":"28"},{"size":657,"mtime":1621513997937,"results":"45","hashOfConfig":"28"},{"size":268,"mtime":1621455250069,"results":"46","hashOfConfig":"28"},{"size":1578,"mtime":1621515521821,"results":"47","hashOfConfig":"28"},{"size":291,"mtime":1621455250074,"results":"48","hashOfConfig":"28"},{"size":3494,"mtime":1621522644040,"results":"49","hashOfConfig":"28"},{"size":1578,"mtime":1621510882556,"results":"50","hashOfConfig":"28"},{"size":665,"mtime":1621522303822,"results":"51","hashOfConfig":"28"},{"size":3785,"mtime":1621524580301,"results":"52","hashOfConfig":"28"},{"size":0,"mtime":1621512566144,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"18dl5j",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\index.js",[],["115","116"],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\App.js",[],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\redux\\store.js",[],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\appStyle.js",[],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\utils\\links.js",[],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\redux\\reducers\\reducer.js",[],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\pages\\CompletedTasks\\CompletedTasks.js",["117","118"],"import React, { useState } from 'react';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\n/* import LocalizationProvider from '@material-ui/lab/LocalizationProvider'; */\nimport List from '../../components/List/List';\nimport ListWrapper from '../../components/ListWrapper/ListWrapper';\nimport DateFnsUtils from '@date-io/moment';\nimport { useStyles } from './CompletedTasksStyles';\nimport { Paper, Grid } from \"@material-ui/core\";\n\nconst styles = {\n    Paper: {\n      padding: 20,\n      margin: \"auto\", \n      textAlign: \"center\",\n      width: 500\n    }\n  };\n\nconst CompletedTasks = () => {\n\n    const classes = useStyles()\n\n    const [selectedDateFrom, setSelectedDateFrom] = useState(new Date('2021-01-01'));\n\n    const [selectedDateTo, setSelectedDateTo] = useState(new Date('2021-10-31'));\n\n    const handleDateFromChange = (date) => {\n        setSelectedDateFrom(date);\n    };\n\n    const handleDateToChange = (date) => {\n        setSelectedDateTo(date);\n    };\n\n    return (\n        <Grid container spacing={0}>\n            \n            <Grid item xs={12}>\n                <div className={classes.CompletedDateFilter}>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <KeyboardDatePicker\n                            margin=\"normal\"\n                            format=\"yyyy-MM-dd\"\n                            variant=\"inline\"\n                            value={selectedDateFrom}\n                            onChange={handleDateFromChange}\n                            KeyboardButtonProps ={{ \"aria-label\" : \"change date\" }}\n                        />\n                    </MuiPickersUtilsProvider>\n\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <KeyboardDatePicker\n                            margin=\"normal\"\n                            format=\"yyyy-MM-dd\"\n                            variant=\"inline\"\n                            value={selectedDateTo}\n                            onChange={handleDateToChange}\n                            KeyboardButtonProps ={{ \"aria-label\" : \"change date\" }}\n                        />\n                    </MuiPickersUtilsProvider>\n                </div>\n            </Grid>\n\n            <Grid item xs={12} style={styles.Paper}>\n                <Grid container>\n                    <List isListDone /> \n                </Grid>\n            </Grid>\n\n        </Grid>\n    )\n}\n\nexport default CompletedTasks;","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\pages\\Main\\Main.js",["119","120","121","122","123","124"],"import { Button } from '@material-ui/core';\nimport React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport TaskInput from \"../../components/TaskInput/TaskInput\";\nimport List from \"../../components/List/List\";\nimport { Paper, Grid } from \"@material-ui/core\";\nimport DateFnsUtils from '@date-io/moment';\nimport { useStyles } from './MainStyles';\nimport ListWrapper from '../../components/ListWrapper/ListWrapper';\n\n\nconst styles = {\n    Paper: {\n      padding: 20,\n      margin: \"auto\", \n      textAlign: \"center\",\n      width: 500\n    }\n  };\n\n\nconst Main = () => {\n\n    const classes = useStyles();\n\n    const [taskDate, setTaskDate] = useState(new Date(Date.now()));\n    const [selectedDateFrom, setSelectedDateFrom] = useState(null);\n\n    const [selectedDateTo, setSelectedDateTo] = useState(null)\n\n    const [selectDateFrom, setSelectDateFrom] = useState(null);\n\n    const [selectDateTo, setSelectDateTo] = useState(null);\n\n\n    const handleDateFromChange = (date) => {\n        setSelectedDateFrom(date);\n    }\n\n    const handleDateToChange = (date) => {\n        setSelectedDateTo(date);\n    }\n\n    const setSelectDate = () => {\n        setSelectDateFrom(selectedDateFrom)\n        setSelectDateTo(selectedDateTo)\n    }\n\n    return (\n    <Grid container spacing={0}>\n\n        <Grid item xs={12}>\n            <div className={classes.MainListDateFilter}>\n                <span className=\"AppText\">с</span>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        variant=\"inline\"\n                        format=\"dd-MM-yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        value={selectedDateFrom}\n                        onChange={handleDateFromChange}\n                        KeyboardButtonProps={{\n                            \"aria-label\": \"change date\",\n                        }}\n                        /* style={{width: 180, marginBottom: \"20px\", marginRight: \"20px\"}} */\n                        disableToolbar\n                    />\n                </MuiPickersUtilsProvider >\n                        <span className=\"AppText\">по</span>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        variant=\"inline\"\n                        format=\"dd-MM-yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline2\"\n                        value={selectedDateTo}\n                        onChange={handleDateToChange}\n                        KeyboardButtonProps={{\n                            \"aria-label\": \"change date\",\n                        }}\n                        /* style={{width: 180, marginBottom: \"20px\"}} */\n                        disableToolbar\n                    />\n                </MuiPickersUtilsProvider>\n\n                <Button\n                    variant=\"outlined\"\n                    onClick={setSelectDate}\n                >\n                    Filter\n                </Button>\n\n            </div>\n        </Grid>\n\n        <Grid item xs={12}>\n            <Paper style={styles.Paper}>\n                <TaskInput />\n            </Paper>\n        </Grid>\n\n        <Grid item xs={12} style={styles.Paper}>\n            <Grid container>\n                <List isListDone={false} selectedDateFrom={selectDateFrom} selectedDateTo={selectDateTo} />\n            </Grid>        \n        </Grid>\n\n    </Grid>\n    );\n};\n\nexport default Main;\n","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\pages\\CompletedTasks\\CompletedTasksStyles.js",[],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\pages\\Main\\MainStyles.js",[],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\List\\List.js",["125","126"],"import React, { useEffect, useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport TaskItem from \"../TaskItem/TaskItem\";\nimport { useSelector } from 'react-redux';\nimport ListHook from '../../hooks/ListHook';\n\nconst List = ({ isListDone }) => {\n    const { tasks, categories } = ListHook();\n    const [sortTasks, setSortTasks] = useState(tasks);\n\n    useEffect(() => {\n        setSortTasks(tasks\n            .filter(task => task.isDone === isListDone)\n            .sort((a) => a.isFavorite ? -1 : 1))\n    }, [tasks])\n\n\n    return (\n        <Grid container>\n            {sortTasks.map((task) => {\n                return <TaskItem \n                            key={task.id} \n                            task={task} \n                            isListDone={isListDone}\n                            categories={categories}\n                        />\n            })}\n        </Grid>\n    )\n}\n\n\nexport default List;\n\n\n\n","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\TaskInput\\TaskInput.js",["127"],"import React, { useEffect, useState } from 'react';\nimport Input from \"@material-ui/core/Input\";\nimport Button from \"@material-ui/core/Button\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { addTask, actions } from '../../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCategoriesFromState, getNewTaskText, selectDefaultCategoryID } from '../../redux/selectors/selectors';\nimport { Select } from '@material-ui/core';\nimport { Icon } from '../Icon/icon';\nimport { useStyles } from './TaskInputStyles';\n\n\n\n\n const TaskInput = () => {\n\n    const classes = useStyles();\n    \n    const newTaskText = useSelector(getNewTaskText);\n    const categories = useSelector(getCategoriesFromState);\n    const categoryID = useSelector(selectDefaultCategoryID);\n    const [open, setOpen] = useState(false);\n    const [category, setCategory] = useState(categoryID);\n    const [taskDate, setTaskDate] = useState(new Date(Date.now()));\n    const dispatch = useDispatch();\n\n     useEffect(() => {\n         setCategory(categoryID);\n     }, [categoryID]); \n\n     const onOpen = () => {\n         setOpen(true);\n     }\n\n     const onClose = () => {\n         setOpen(false);\n     }\n\n     const newTaskParams = {\n         title: newTaskText,\n         isDone: false,\n         isEdit: false,\n         categoryID: categoryID,\n         isFavorite: false,\n         date: taskDate.valueOf()\n     }\n                   \n     const addHandleEnter = (event) => {\n         if (newTaskText && newTaskText.length < 30 && event.key === 'Enter') {\n             dispatch(addTask(newTaskParams))\n         }\n     }\n\n     const inputChange = event => {\n        const { value } = event.target;\n        const text = value;\n        dispatch(actions.updateNewMessageText(text));\n     }\n\n     const handleChangeCategory = (event) => {\n         dispatch(actions.setCategory(event.target.value));\n     }\n\n     //debugger;\n     return (\n        <div className={classes.todoForm}>\n            <Input\n            value={newTaskText}\n            onChange={inputChange}\n            onKeyPress={addHandleEnter}\n            placeholder='Todo'\n            style={{ width: \"90%\" }}\n            />\n        \n            <Select onOpen={onOpen}\n                    onClose={onClose}\n                    onChange={handleChangeCategory}\n                    value={category}\n            >\n                {\n                    categories.map(({ id, color, icon, name}) => (\n                        <MenuItem key={id} value={id}>\n                            <>\n                                <Icon color={color} icon={icon} />\n                                {open && name}\n                            </>\n    \n                        </MenuItem>\n                    ))\n                }\n            </Select>\n\n            <Button \n            type=\"submit\"\n            disabled={newTaskText.length === 0 || newTaskText.length > 30}\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ width: \"10%\" }}\n            onClick={() => {\n                newTaskText && newTaskText.length < 10 && dispatch(addTask(newTaskParams));\n            }}\n            >\n                Add\n            </Button>\n        </div>\n    );\n }\n\n\nexport default TaskInput;","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\ListWrapper\\ListWrapper.js",[],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\redux\\actions.js",[],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\TaskInput\\TaskInputStyles.js",[],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\hooks\\ListHook.js",["128","129","130"],"import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTasksFromState, getCategoriesFromState, getIsFetching } from '../redux/selectors/selectors';\nimport { getDefaultCategory, getCategories } from '../redux/actions';\n\nconst ListHook = () => {\n    \n    const dispatch = useDispatch();\n    const tasks = useSelector(getTasksFromState);\n    const unDoneTasks = useSelector(getTasksFromState);\n    const categories = useSelector(getCategoriesFromState);\n    const isFetching = useSelector(getIsFetching);\n\n    useEffect(() => {\n        dispatch(getCategories());\n        dispatch(getDefaultCategory());\n    }, [])\n\n    return {\n        tasks,\n        unDoneTasks,\n        categories,\n        isFetching,\n        dispatch\n    }\n}\n\nexport default ListHook;","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\TaskItem\\TaskItem.js",["131","132","133"],"import React from \"react\";\nimport { Grid, Paper, Button, TextField } from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Delete, Build, Star } from \"@material-ui/icons\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions,\n         deleteTask,\n         updateTask\n} from \"../../redux/actions\";\nimport { getChangedTaskText } from '../../redux/selectors/selectors';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { StyledButton } from './taskButton';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\n\nconst styles = {\n    Icon: {\n      marginLeft: \"auto\"\n    },\n    Paper: {\n      margin: \"auto\",\n      padding: 10,\n      display: \"flex\",\n      alignItems: \"center\",\n      marginTop: 10,\n      width: 500\n    }\n  };\n\n\nconst TaskItem = ({ task, categories, isListDone }) => {\n\n\n  const dispatch = useDispatch();\n\n  const changedTaskText = useSelector(getChangedTaskText);\n\n  const updateTextParams = {\n    title: changedTaskText,\n    id: task.id\n  }\n\n    const editHandleEnter = (event) => {\n    if (event.key === 'Enter') {\n      dispatch(updateTask({\n        isFavorite: task.isFavorite,\n        id: task.id,\n        isDone: task.isDone,\n        title: changedTaskText,\n        isListDone: isListDone\n      }))\n      dispatch(actions.editTaskText(updateTextParams));\n    }\n  }\n\n  const updateTaskFavorite = () => {\n    dispatch(updateTask({\n      isFavorite: !task.isFavorite,\n      id: task.id,\n      isDone: task.isDone,\n      title: task.title,\n      isListDone: isListDone\n    }))\n    dispatch(actions.changeFavoriteStatus(task.id))\n  }\n\n  const inputTextChanger = event => {\n    const { value } = event.target;\n    const text = value;\n    dispatch(actions.updateEditTaskText(text));\n    }\n\n\n  const updateCategoryHandler = () => {\n    dispatch(updateTask({\n      isFavorite: task.isFavorite,\n      title: task.title,\n      isDone: !task.isDone,\n      id: task.id,\n      isListDone: isListDone\n    }))\n    dispatch(actions.changeTaskStatus(task.id, isListDone))\n  }\n\n  const changeTaskHandler = () => {\n    dispatch(actions.changeHandler(task.id));\n  }\n\n  const deleteChosenTask = () => dispatch(deleteTask(task.id));\n\n  const enterHandler = (event) => changedTaskText.length > 0 ? editHandleEnter(event) : null;\n  \n\n\n    return (\n    <Grid item xs={12}>\n      <Paper elevation={2} style={styles.Paper}>\n        <div style={{padding: '9px'}}>{`${new Date(task.date).toLocaleDateString()}`}</div>\n        <Checkbox onClick={updateCategoryHandler} checked={task.isDone} />\n         {/* <div>\n          {categories.map(category => {\n            if (category.id === task.categoryID) {\n              return (<span className='material-icons' key={task.categoryID} \n                style={{\n                  color: сategory.color,\n                  verticalAlign: \"middle\",\n                  margin: 5 \n                }}\n              >\n                  {category.icon}\n              </span>)\n            }\n          })}\n        </div>  */}\n        {task.isEdit\n                ? <TextField\n                  value={changedTaskText}\n                  onChange={inputTextChanger}\n                  key={task.id + 1}\n                  onKeyPress={enterHandler}\n                  />\n                : \n                  //(<span>{task.title}</span>)\n                  (<span onClick={changeTaskHandler}>{task.title}</span>) \n            }\n          <StyledButton className=\"material-icons\" onClick={updateTaskFavorite}>\n            {task.isFavorite ?  <StarIcon /> : <StarBorderIcon /> }\n          </StyledButton>\n        \n          <IconButton\n            color=\"secondary\"\n            aria-label=\"Delete\"\n            onClick={deleteChosenTask}\n          >\n            <Delete fontSize=\"small\" />\n          </IconButton>\n\n      </Paper>\n    </Grid>\n    )\n}\n\nexport default TaskItem;","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\redux\\selectors\\selectors.js",[],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\Icon\\icon.js",["134","135"],"import React from 'react';\n\nconst color = \"yellowgreen\" | \"yellow\" | \"black\" | \"\" ;\nconst icon = \"anchor\" | \"home\" | \"thumb_up\" | \"\" ;\n\nexport const Icon = ({ icon, color }) => {\n    return <span className='material-icons' style={{color}}>\n        {icon}\n    </span>\n}","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\api\\api.js",["136"],"import axios from 'axios';\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'http://localhost:3000/'   /* `${process.env.REACT_APP_URL}` */\n})\n\nconst limit = 50;   /* `${process.env.REACT_APP_TASK_LIMIT}` */\n\n\nexport const API = {\n      getTasks: (url) => {\n        instance\n          .get(`${url}`)\n            .then((response) => response.data)\n      },\n\n      deleteTask(id) {\n        return instance.delete(`/tasks/${id}`);\n      },\n\n      addTask: (newTaskParams) => {\n        return instance.post(`/tasks/`, newTaskParams)\n      },\n\n      updateTask: (updateTaskParams) => {\n        instance.patch(`/tasks/${updateTaskParams.id}`, {\n          title: updateTaskParams.title,\n          isDone: updateTaskParams.isDone,\n          isFavorite: updateTaskParams.isFavorite          \n        });\n      },\n\n      updateCategoryText: (updateCategoryParams) => {\n        instance.patch(`/categories/${updateCategoryParams.id}`, { name: updateCategoryParams.name });\n      },\n\n      getCategories: () => {\n        instance.get(`/categories`)\n        .then((response) => response.data.id);\n      },\n\n      getDefaultCategory: () => {\n        instance.get(`/defaultCategory`)\n        .then((response) => response.data.id);\n      },\n\n      deleteCategory: (id) => {\n        instance.delete(`/categories/${id}`);\n      },\n\n      updateCategory: ({ id, icon, color}) => {\n        instance.patch(`/categories/${id}`, { icon, color });\n      },\n\n      updateDefaultCategory: (id) => {\n        instance.put(`/defaultCategory`, { id });\n      }\n}\n\nexport default API;\n","C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\TaskItem\\taskButton.js",[],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\pages\\Settings\\Settings.js",["137","138","139","140","141"],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\pages\\Settings\\SettingsStyles.js",[],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\Categories\\CategoriesList.jsx",["142","143"],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\Categories\\Category.jsx",["144","145"],"C:\\Users\\alexa\\Desktop\\work\\alexandr-testwork\\src\\components\\Categories\\CategoryStyles.jsx",[],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":5,"column":8,"nodeType":"152","messageId":"153","endLine":5,"endColumn":19},{"ruleId":"150","severity":1,"message":"154","line":8,"column":10,"nodeType":"152","messageId":"153","endLine":8,"endColumn":15},{"ruleId":"150","severity":1,"message":"155","line":2,"column":16,"nodeType":"152","messageId":"153","endLine":2,"endColumn":25},{"ruleId":"150","severity":1,"message":"156","line":3,"column":9,"nodeType":"152","messageId":"153","endLine":3,"endColumn":20},{"ruleId":"150","severity":1,"message":"157","line":3,"column":22,"nodeType":"152","messageId":"153","endLine":3,"endColumn":33},{"ruleId":"150","severity":1,"message":"151","line":10,"column":8,"nodeType":"152","messageId":"153","endLine":10,"endColumn":19},{"ruleId":"150","severity":1,"message":"158","line":27,"column":12,"nodeType":"152","messageId":"153","endLine":27,"endColumn":20},{"ruleId":"150","severity":1,"message":"159","line":27,"column":22,"nodeType":"152","messageId":"153","endLine":27,"endColumn":33},{"ruleId":"150","severity":1,"message":"157","line":4,"column":10,"nodeType":"152","messageId":"153","endLine":4,"endColumn":21},{"ruleId":"160","severity":1,"message":"161","line":15,"column":8,"nodeType":"162","endLine":15,"endColumn":15,"suggestions":"163"},{"ruleId":"150","severity":1,"message":"159","line":24,"column":22,"nodeType":"152","messageId":"153","endLine":24,"endColumn":33},{"ruleId":"150","severity":1,"message":"164","line":1,"column":8,"nodeType":"152","messageId":"153","endLine":1,"endColumn":13},{"ruleId":"150","severity":1,"message":"165","line":1,"column":28,"nodeType":"152","messageId":"153","endLine":1,"endColumn":36},{"ruleId":"160","severity":1,"message":"166","line":17,"column":8,"nodeType":"162","endLine":17,"endColumn":10,"suggestions":"167"},{"ruleId":"150","severity":1,"message":"168","line":2,"column":23,"nodeType":"152","messageId":"153","endLine":2,"endColumn":29},{"ruleId":"150","severity":1,"message":"169","line":4,"column":18,"nodeType":"152","messageId":"153","endLine":4,"endColumn":23},{"ruleId":"150","severity":1,"message":"170","line":4,"column":25,"nodeType":"152","messageId":"153","endLine":4,"endColumn":29},{"ruleId":"150","severity":1,"message":"171","line":3,"column":7,"nodeType":"152","messageId":"153","endLine":3,"endColumn":12},{"ruleId":"150","severity":1,"message":"172","line":4,"column":7,"nodeType":"152","messageId":"153","endLine":4,"endColumn":11},{"ruleId":"150","severity":1,"message":"173","line":8,"column":7,"nodeType":"152","messageId":"153","endLine":8,"endColumn":12},{"ruleId":"150","severity":1,"message":"174","line":2,"column":10,"nodeType":"152","messageId":"153","endLine":2,"endColumn":14},{"ruleId":"150","severity":1,"message":"175","line":13,"column":54,"nodeType":"152","messageId":"153","endLine":13,"endColumn":75},{"ruleId":"150","severity":1,"message":"176","line":26,"column":10,"nodeType":"152","messageId":"153","endLine":26,"endColumn":16},{"ruleId":"150","severity":1,"message":"177","line":27,"column":10,"nodeType":"152","messageId":"153","endLine":27,"endColumn":21},{"ruleId":"160","severity":1,"message":"166","line":34,"column":6,"nodeType":"162","endLine":34,"endColumn":8,"suggestions":"178"},{"ruleId":"150","severity":1,"message":"179","line":3,"column":10,"nodeType":"152","messageId":"153","endLine":3,"endColumn":22},{"ruleId":"150","severity":1,"message":"180","line":3,"column":24,"nodeType":"152","messageId":"153","endLine":3,"endColumn":39},{"ruleId":"150","severity":1,"message":"181","line":12,"column":5,"nodeType":"152","messageId":"153","endLine":12,"endColumn":27},{"ruleId":"182","severity":2,"message":"183","line":56,"column":9,"nodeType":"184","messageId":"185","endLine":57,"endColumn":63},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"no-unused-vars","'ListWrapper' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'taskDate' is assigned a value but never used.","'setTaskDate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isListDone'. Either include it or remove the dependency array. If 'setSortTasks' needs the current value of 'isListDone', you can also switch to useReducer instead of useState and read 'isListDone' in the reducer.","ArrayExpression",["188"],"'React' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["189"],"'Button' is defined but never used.","'Build' is defined but never used.","'Star' is defined but never used.","'color' is assigned a value but never used.","'icon' is assigned a value but never used.","'limit' is assigned a value but never used.","'Grid' is defined but never used.","'updateDefaultCategory' is defined but never used.","'button' is assigned a value but never used.","'choosesIcon' is assigned a value but never used.",["190"],"'CSSTranstion' is defined but never used.","'TransitionGroup' is defined but never used.","'updateEditCategoryText' is defined but never used.","no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"193","fix":"195"},"Update the dependencies array to be: [isListDone, tasks]",{"range":"196","text":"197"},"Update the dependencies array to be: [dispatch]",{"range":"198","text":"199"},{"range":"200","text":"199"},[526,533],"[isListDone, tasks]",[672,674],"[dispatch]",[1323,1325]]