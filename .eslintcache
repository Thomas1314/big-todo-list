[{"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskItem.tsx":"1","/home/alexandr/ToDoList/alexandr-testwork/src/api/api.ts":"2","/home/alexandr/ToDoList/alexandr-testwork/src/components/Icon.tsx":"3","/home/alexandr/ToDoList/alexandr-testwork/src/utils/icons.ts":"4","/home/alexandr/ToDoList/alexandr-testwork/src/utils/colors.ts":"5","/home/alexandr/ToDoList/alexandr-testwork/src/redux/store.ts":"6","/home/alexandr/ToDoList/alexandr-testwork/src/redux/reducers/reducer.ts":"7","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.tsx":"8","/home/alexandr/ToDoList/alexandr-testwork/src/redux/actions.ts":"9","/home/alexandr/ToDoList/alexandr-testwork/src/redux/selectors/selectors.ts":"10","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskListWrapper.tsx":"11","/home/alexandr/ToDoList/alexandr-testwork/src/utils/QueryParams.ts":"12","/home/alexandr/ToDoList/alexandr-testwork/src/index.tsx":"13","/home/alexandr/ToDoList/alexandr-testwork/src/App.tsx":"14","/home/alexandr/ToDoList/alexandr-testwork/src/utils/routes.ts":"15","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskList.tsx":"16","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.tsx":"17","/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.tsx":"18","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.styles.ts":"19","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.styles.ts":"20","/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.styles.ts":"21","/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoriesList.tsx":"22","/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoryCreator.tsx":"23","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.tsx":"24","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.styles.ts":"25","/home/alexandr/ToDoList/alexandr-testwork/src/components/Category.tsx":"26","/home/alexandr/ToDoList/alexandr-testwork/src/components/Categories.styles.ts":"27","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskListWrapper.styles.ts":"28","/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.styles.ts":"29","/home/alexandr/ToDoList/alexandr-testwork/src/components/Filter.tsx":"30","/home/alexandr/ToDoList/alexandr-testwork/src/hooks/ListHook.tsx":"31","/home/alexandr/ToDoList/alexandr-testwork/src/components/Preloader/Preloader.tsx":"32","/home/alexandr/ToDoList/alexandr-testwork/src/components/Preloader/Preloader.styles.ts":"33","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskButton.ts":"34","/home/alexandr/ToDoList/alexandr-testwork/src/utils/navTabs.ts":"35","/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.tsx":"36","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskList.styles.ts":"37"},{"size":4484,"mtime":1622633424306,"results":"38","hashOfConfig":"39"},{"size":2255,"mtime":1622627805439,"results":"40","hashOfConfig":"39"},{"size":506,"mtime":1622197963596,"results":"41","hashOfConfig":"39"},{"size":121,"mtime":1622198358965,"results":"42","hashOfConfig":"39"},{"size":123,"mtime":1622197164279,"results":"43","hashOfConfig":"39"},{"size":750,"mtime":1622625475667,"results":"44","hashOfConfig":"39"},{"size":5559,"mtime":1622448352557,"results":"45","hashOfConfig":"39"},{"size":3298,"mtime":1622454385408,"results":"46","hashOfConfig":"39"},{"size":4721,"mtime":1622627845824,"results":"47","hashOfConfig":"39"},{"size":837,"mtime":1622631866939,"results":"48","hashOfConfig":"39"},{"size":4000,"mtime":1622641462218,"results":"49","hashOfConfig":"39"},{"size":304,"mtime":1622445745485,"results":"50","hashOfConfig":"39"},{"size":296,"mtime":1622448379855,"results":"51","hashOfConfig":"39"},{"size":452,"mtime":1622448391587,"results":"52","hashOfConfig":"39"},{"size":504,"mtime":1622448584083,"results":"53","hashOfConfig":"39"},{"size":1990,"mtime":1622644140852,"results":"54","hashOfConfig":"39"},{"size":3234,"mtime":1622640611833,"results":"55","hashOfConfig":"39"},{"size":2153,"mtime":1622643453277,"results":"56","hashOfConfig":"39"},{"size":1315,"mtime":1622454324798,"results":"57","hashOfConfig":"39"},{"size":588,"mtime":1622640854764,"results":"58","hashOfConfig":"39"},{"size":337,"mtime":1622458051648,"results":"59","hashOfConfig":"39"},{"size":928,"mtime":1622455836468,"results":"60","hashOfConfig":"39"},{"size":4750,"mtime":1622630213768,"results":"61","hashOfConfig":"39"},{"size":3381,"mtime":1622626928844,"results":"62","hashOfConfig":"39"},{"size":146,"mtime":1622452895273,"results":"63","hashOfConfig":"39"},{"size":3752,"mtime":1622455358882,"results":"64","hashOfConfig":"39"},{"size":1137,"mtime":1622454420023,"results":"65","hashOfConfig":"39"},{"size":321,"mtime":1622458387461,"results":"66","hashOfConfig":"39"},{"size":419,"mtime":1622459445148,"results":"67","hashOfConfig":"39"},{"size":2718,"mtime":1622642144576,"results":"68","hashOfConfig":"39"},{"size":932,"mtime":1622624638687,"results":"69","hashOfConfig":"39"},{"size":346,"mtime":1622643821189,"results":"70","hashOfConfig":"39"},{"size":242,"mtime":1622465930572,"results":"71","hashOfConfig":"39"},{"size":266,"mtime":1622466107385,"results":"72","hashOfConfig":"39"},{"size":259,"mtime":1622538070576,"results":"73","hashOfConfig":"39"},{"size":517,"mtime":1622538818311,"results":"74","hashOfConfig":"39"},{"size":143,"mtime":1622641578119,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},"jepx49",{"filePath":"80","messages":"81","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"79"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"79"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"79"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"79"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"79"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"79"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"79"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"79"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"79"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"79"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"79"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"79"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"79"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskItem.tsx",["165"],"import React, { ChangeEvent } from 'react';\nimport { Grid, Paper, TextField } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Delete } from '@material-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions, deleteTask, updateTask } from '../redux/actions';\nimport { getChangedTaskText } from '../redux/selectors/selectors';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { StyledButton } from './TaskButton';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport { CategoryType } from '../types/types';\n\nexport type TaskType = {\n  title: string;\n  isDone: boolean;\n  isEdit: boolean;\n  id: number;\n  isFavorite: boolean;\n  categoryId: number;\n  date: number;\n};\n\nexport type PropsType = {\n  task: TaskType;\n  categories: CategoryType[];\n  isListDone: boolean;\n  setEnd: (end: number) => void;\n  end: number;\n};\n\nconst styles = {\n  Icon: {\n    marginLeft: 'auto',\n  },\n  Paper: {\n    margin: 'auto',\n    padding: 10,\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: 10,\n    width: 500,\n  },\n};\n\nconst TaskItem: React.FC<PropsType> = ({ task, categories, isListDone }) => {\n  const dispatch = useDispatch();\n\n  const changedTaskText = useSelector(getChangedTaskText);\n\n  const updateTextParams = {\n    title: changedTaskText,\n    id: task.id,\n  };\n\n  const editHandleEnter = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if (event.key === 'Enter') {\n      dispatch(\n        updateTask({\n          isFavorite: task.isFavorite,\n          id: task.id,\n          isDone: task.isDone,\n          title: changedTaskText,\n          isListDone: isListDone,\n        })\n      );\n      dispatch(actions.editTaskText(updateTextParams));\n    }\n  };\n\n  const updateTaskFavorite = () => {\n    dispatch(\n      updateTask({\n        isFavorite: !task.isFavorite,\n        id: task.id,\n        isDone: task.isDone,\n        title: task.title,\n        isListDone: isListDone,\n      })\n    );\n    dispatch(actions.changeFavoriteStatus(task.id));\n  };\n\n  const inputTextChanger = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    const { value } = event.target;\n    const text = value;\n    dispatch(actions.updateEditTaskText(text));\n  };\n\n  const updateCategoryHandler = () => {\n    dispatch(\n      updateTask({\n        isFavorite: task.isFavorite,\n        title: task.title,\n        isDone: !task.isDone,\n        id: task.id,\n        isListDone: isListDone,\n      })\n    );\n    dispatch(actions.changeTaskStatus(task.id, isListDone));\n  };\n\n  const changeTaskHandler = () => {\n    dispatch(actions.changeHandler(task.id));\n  };\n\n  const deleteChosenTask = () => dispatch(deleteTask(task.id));\n\n  const enterHandler = (event: React.KeyboardEvent<HTMLDivElement>) =>\n    changedTaskText.length > 0 ? editHandleEnter(event) : null;\n  return (\n    <Grid item xs={12}>\n      <Paper elevation={2} style={styles.Paper}>\n        <div style={{ padding: '9px' }}>{`${new Date(\n          task.date\n        ).toLocaleDateString()}`}</div>\n        <Checkbox onClick={updateCategoryHandler} checked={task.isDone} />\n        <div style={{ padding: '10px' }}>\n          {categories.map((category) => {\n            if (category.id === task.categoryId) {\n              return (\n                <span\n                  key={task.categoryId}\n                  className=\"material-icons\"\n                  style={{\n                    color: category.color,\n                    verticalAlign: 'middle',\n                    margin: 5,\n                  }}\n                >\n                  {category.icon}\n                </span>\n              );\n            }\n          })}\n        </div>\n\n        {task.isEdit ? (\n          <TextField\n            value={changedTaskText}\n            onChange={inputTextChanger}\n            key={task.id + 1}\n            onKeyPress={enterHandler}\n          />\n        ) : (\n          //(<span>{task.title}</span>)\n          <span onClick={changeTaskHandler}>{task.title}</span>\n        )}\n        <StyledButton className=\"material-icons\" onClick={updateTaskFavorite}>\n          {task.isFavorite ? <StarIcon /> : <StarBorderIcon />}\n        </StyledButton>\n\n        <IconButton\n          color=\"secondary\"\n          aria-label=\"Delete\"\n          onClick={deleteChosenTask}\n        >\n          <Delete fontSize=\"small\" />\n        </IconButton>\n      </Paper>\n    </Grid>\n  );\n};\n\nexport default TaskItem;\n",["166","167"],"/home/alexandr/ToDoList/alexandr-testwork/src/api/api.ts",["168","169","170","171","172","173","174","175","176","177","178"],"import axios from 'axios';\nimport { TaskType } from '../components/TaskItem';\nimport {\n  CategoryDataType,\n  CategoryType,\n  NewCategoryParamsType,\n  newTaskParamsType,\n  ParamsType,\n  updateCategoryParamsType,\n  UpdateCategoryParamsType,\n  UpdateTaskType,\n} from '../types/types';\n\nconst instance = axios.create({\n  withCredentials: true,\n  baseURL: 'http://localhost:3000/' /* `${process.env.REACT_APP_URL}` */,\n});\n\nconst limit = 50;\n\nexport type Colors = 'yellowgreen' | 'yellow' | 'black' | '';\nexport type Icons = 'pets' | 'home' | 'nightlight_round' | '';\n\nexport const API = {\n  getTasks: (Params: ParamsType) =>\n    instance\n      .get<Array<TaskType>>(\n        `tasks?date_gte=${Params.dateFrom}&date_lte=${Params.dateTo}&${Params.searchString}&isDone=${Params.isListDone}&_start=0&_end=${Params.end}&_limit=${limit}`\n      )\n      .then((response) => response.data),\n\n  deleteTask(id: number) {\n    instance.delete(`/tasks/${id}`);\n  },\n\n  addTask: (newTaskParams: newTaskParamsType) =>\n    instance.post<TaskType>('/tasks/', newTaskParams),\n\n  updateTask: (updateTaskParams: UpdateTaskType) => {\n    instance.patch<CategoryType>(`/tasks/${updateTaskParams.id}`, {\n      title: updateTaskParams.title,\n      isDone: updateTaskParams.isDone,\n      isFavorite: updateTaskParams.isFavorite,\n    });\n  },\n\n  updateCategoryText: (updateCategoryParams: updateCategoryParamsType) => {\n    instance.patch<CategoryType>(`/categories/${updateCategoryParams.id}`, {\n      name: updateCategoryParams.name,\n    });\n  },\n\n  getCategories: () =>\n    instance\n      .get<Array<CategoryType>>('/categories')\n      .then((response) => response.data),\n\n  getDefaultCategory: () =>\n    instance\n      .get<CategoryDataType>('/defaultCategory')\n      .then((response) => response.data.id),\n\n  deleteCategory: (id: number) => instance.delete(`/categories/${id}`),\n\n  updateCategory: ({ id, icon, color }: UpdateCategoryParamsType) => {\n    instance.patch<CategoryType>(`/categories/${id}`, { icon, color });\n  },\n\n  updateDefaultCategory: (id: number | undefined) => {\n    instance.put<CategoryType>('/defaultCategory', { id });\n  },\n\n  addCategory: (newCategoryParams: NewCategoryParamsType) =>\n    instance.post<CategoryType>('/categories', newCategoryParams),\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/Icon.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/icons.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/colors.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/redux/store.ts",["179"],"import { createStore, applyMiddleware, Action } from 'redux';\nimport { reducer } from './reducers/reducer';\nimport thunkMiddleWare, { ThunkAction } from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\ntype RootReducerType = typeof reducer;\nexport type AppStateType = ReturnType<RootReducerType>;\n\nexport type InferActionsTypes<T> = T extends {\n  [keys: string]: (...args: any[]) => infer U;\n}\n  ? U\n  : never;\n\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> =\n  ThunkAction<R, AppStateType, unknown, A>;\n\n/* export const store = createStore(reducer, applyMiddleware(thunkMiddleWare)); */\n\nexport const store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunkMiddleWare))\n);\n","/home/alexandr/ToDoList/alexandr-testwork/src/redux/reducers/reducer.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.tsx",["180"],"import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Select } from '@material-ui/core';\nimport { Icon } from '../components/Icon';\nimport { CategoriesList } from '../components/CategoriesList';\nimport { CategoryCreator } from '../components/CategoryCreator';\nimport {\n  getCategoriesFromState,\n  selectDefaultCategoryId,\n} from '../redux/selectors/selectors';\nimport {\n  actions,\n  getCategories,\n  getDefaultCategory,\n  updateDefaultCategory,\n} from '../redux/actions';\nimport useStyles from './Settings.styles';\nimport { Colors, Icons } from '../api/api';\n\nexport const Settings: React.FC = () => {\n  const classes = useStyles();\n  const categories = useSelector(getCategoriesFromState);\n  const categoryId = useSelector(selectDefaultCategoryId);\n  const [category, setCategory] = useState<number | null>(categoryId);\n  const [opened, setOpened] = useState<boolean>(false);\n  const [edit, setEdit] = useState(false);\n  const [editCategoryId, setEditCategoryId] = useState<number | null>(null);\n  const [button, setButton] = useState<Colors>('black');\n  const [choosesIcon, setChoosesIcon] = useState<Icons>('home');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCategories());\n    dispatch(getDefaultCategory());\n  }, []);\n\n  useEffect(() => {\n    setCategory(categoryId);\n  }, [categoryId]);\n\n  const onOpen = () => {\n    setOpened(true);\n  };\n  const onClose = () => {\n    setOpened(false);\n  };\n\n  const handleChangeCategory = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    dispatch(actions.setCategory(event.target.value as number));\n    dispatch(updateDefaultCategory(event.target.value as number));\n  };\n\n  return (\n    <div>\n      <h1 className={classes.SettingsMainTitle}>Settings</h1>\n      <div className={classes.SettingsPageContainer}>\n        <div>\n          <h2>{edit ? 'Edit Icon' : 'Categories Maker'}</h2>\n          <CategoryCreator\n            edit={edit}\n            editCategoryId={editCategoryId}\n            setEditCategoryId={setEditCategoryId}\n            setEdit={setEdit}\n            setButton={setButton}\n            setChoosesIcon={setChoosesIcon}\n            button={button}\n            choosesIcon={choosesIcon}\n          />\n        </div>\n        <div className={classes.SettingsPageCategories}>\n          <div>\n            <h2>Categories</h2>\n          </div>\n          <CategoriesList\n            categories={categories}\n            setEdit={setEdit}\n            setEditCategoryId={setEditCategoryId}\n            editCategoryId={editCategoryId}\n            setButton={setButton}\n            setChoosesIcon={setChoosesIcon}\n          />\n          <h4>Default category: </h4>\n\n          <Select\n            onOpen={onOpen}\n            onClose={onClose}\n            onChange={handleChangeCategory}\n            value={category}\n          >\n            {categories.map(({ id, color, icon, name }) => (\n              <MenuItem key={id} value={id}>\n                <>\n                  <Icon color={color} icon={icon} />\n                  {opened && name}\n                </>\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/redux/actions.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/redux/selectors/selectors.ts",["181","182","183","184","185","186","187","188","189","190"],"import { AppStateType } from '../store';\n\nexport const getTasksFromState = (state: AppStateType) => state.unDoneTasks;\nexport const getDoneTasksFromState = (state: AppStateType) => state.doneTasks;\n\nexport const getNewTaskText = (state: AppStateType) => state.newTaskText;\n\nexport const getChangedTaskText = (state: AppStateType) =>\n  state.changedTaskText;\nexport const getChangedCategoryText = (state: AppStateType) =>\n  state.changedCategoryText;\nexport const getCategoriesFromState = (state: AppStateType) => state.categories;\nexport const getIsFetching = (state: AppStateType) => state.isFetching;\nexport const selectDefaultCategoryId = (state: AppStateType) =>\n  state.categoryId;\nexport const getCategoriesName = (state: AppStateType) => state.categoriesName;\nexport const getEndNumber = (state: AppStateType) => state.endNumber;\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskListWrapper.tsx",["191","192","193"],"import React, { useEffect, useState } from 'react';\nimport { TaskList } from './TaskList';\nimport ListHook from '../hooks/ListHook';\nimport { useSelector } from 'react-redux';\nimport { getIsFetching } from '../redux/selectors/selectors';\nimport { useLocation } from 'react-router-dom';\nimport queryString from 'query-string';\nimport QueryParams from '../utils/QueryParams';\nimport { getTasks } from '../redux/actions';\nimport { useStyles } from './TaskListWrapper.styles';\nimport Filter from './Filter';\nimport Preloader from './Preloader/Preloader';\nimport { DateType } from '@date-io/type';\nimport { Grid } from '@material-ui/core';\n\ntype ListWrapperType = {\n  isListDone: boolean;\n  selectedDateFrom: DateType | null;\n  selectedDateTo: DateType | null;\n};\n\nexport const ListWrapper: React.FC<ListWrapperType> = ({\n  isListDone,\n  selectedDateFrom,\n  selectedDateTo,\n}) => {\n  const classes = useStyles();\n  const isFetching = useSelector(getIsFetching);\n  const locationPath = useLocation();\n  const parsed = queryString.parse(window.location.search);\n  const [categoryId, setCategoryId] = useState<string | string[] | null>(() => {\n    return parsed.categoryId;\n  });\n\n  const [dateSort, setDateSort] = useState<boolean>(() => {\n    return parsed._sort === ('isFavorite,date' || 'isFavorite,date,title');\n  });\n  const [nameSort, setNameSort] = useState<boolean>(() => {\n    return parsed._sort === ('isFavorite,title' || 'isFavorite,date,title');\n  });\n\n  const { categories, tasks, history, endNumber, unDoneTasks, dispatch } =\n    ListHook();\n  /* console.log(tasks, unDoneTasks); */\n\n  const [end, setEnd] = useState<number>(endNumber);\n\n  const dateFrom = selectedDateFrom\n    ? selectedDateFrom.valueOf() - 43150000\n    : 1577836800000;\n  const dateTo = selectedDateTo\n    ? selectedDateTo.valueOf() + 43150000\n    : 1640995200000;\n\n  const onDateSortChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDateSort(e.target.checked);\n  };\n  const onNameSortChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNameSort(e.target.checked);\n  };\n\n  useEffect(() => {\n    /* parsed.categoryId ? setCategoryId(parsed.categoryId) : null; */\n    switch (parsed._sort) {\n      case 'isFavorite,date': {\n        setDateSort(true);\n        QueryParams._sort[1] = 'date';\n        QueryParams._order[1] = 'asc';\n        break;\n      }\n      case 'isFavorite,title': {\n        setNameSort(true);\n        QueryParams._sort[2] = 'title';\n        QueryParams._order[2] = 'asc';\n        break;\n      }\n      case 'isFavorite,date,title': {\n        setDateSort(true);\n        QueryParams._sort[1] = 'date';\n        QueryParams._order[1] = 'asc';\n        setNameSort(true);\n        QueryParams._sort[2] = 'title';\n        QueryParams._order[2] = 'asc';\n        break;\n      }\n      default:\n        break;\n    }\n  }, []);\n\n  useEffect(() => {\n    QueryParams._sort[1] = dateSort ? 'date' : null;\n    QueryParams._sort[2] = nameSort ? 'title' : null;\n    QueryParams._order[1] = dateSort ? 'asc' : null;\n    QueryParams._order[2] = nameSort ? 'asc' : null;\n    QueryParams.categoryId = categoryId;\n\n    const searchString = queryString.stringify(QueryParams, {\n      skipNull: true,\n      arrayFormat: 'comma',\n    });\n\n    history.push({\n      pathname: locationPath.pathname,\n      search: searchString,\n    });\n\n    dispatch(getTasks({ isListDone, end, searchString, dateFrom, dateTo }));\n  }, [dateSort, nameSort, categoryId, end, dateFrom, dateTo]);\n  return (\n    <div className={classes.AppCategoryChanger}>\n      <Filter\n        onDateSortChange={onDateSortChange}\n        onNameSortChange={onNameSortChange}\n        dateSort={dateSort}\n        nameSort={nameSort}\n        categoryId={categoryId}\n        setCategoryId={setCategoryId}\n      />\n      {isFetching ? <Preloader /> : null}\n      <TaskList\n        tasks={!isListDone ? unDoneTasks : tasks}\n        end={end}\n        setEnd={setEnd}\n        categories={categories}\n        isListDone={isListDone}\n      />\n    </div>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/utils/QueryParams.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/index.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/App.tsx",["194"],"import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { AppNavbar } from './AppNavbar';\nimport { routes } from './utils/routes';\n\nconst App = () => (\n  <Router>\n    <AppNavbar />\n    <div>\n      <Switch>\n        {routes.map(({ path, Component }) => (\n          <Route key={path} exact path={path} component={Component} />\n        ))}\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","/home/alexandr/ToDoList/alexandr-testwork/src/utils/routes.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskList.tsx",["195","196","197"],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.tsx",["198"],"import { Button } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\nimport TaskInput from '../components/TaskInput';\nimport { Paper, Grid } from '@material-ui/core';\nimport DateFnsUtils from '@date-io/moment';\nimport { useStyles } from './Main.styles';\nimport { ListWrapper } from '../components/TaskListWrapper';\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\n\nconst styles = {\n  Paper: {\n    padding: 20,\n    margin: 'auto',\n    textAlign: 'center',\n    width: 500,\n  },\n};\n\ntype DateType = MaterialUiPickersDate | null;\n\nexport const Main: React.FC = () => {\n  const classes = useStyles();\n\n  const [selectedDateFrom, setSelectedDateFrom] =\n    useState<DateType | null>(null);\n\n  const [selectedDateTo, setSelectedDateTo] = useState<DateType | null>(null);\n\n  const [selectDateFrom, setSelectDateFrom] = useState<DateType | null>(null);\n\n  const [selectDateTo, setSelectDateTo] = useState<DateType | null>(null);\n\n  const handleDateFromChange = (date: DateType | null) => {\n    setSelectedDateFrom(date);\n  };\n\n  const handleDateToChange = (date: DateType | null) => {\n    setSelectedDateTo(date);\n  };\n\n  const setSelectDate = () => {\n    setSelectDateFrom(selectedDateFrom);\n    setSelectDateTo(selectedDateTo);\n  };\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={12}>\n        <div className={classes.MainListDateFilter}>\n          <span className=\"AppText\">с</span>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              variant=\"inline\"\n              format=\"dd-MM-yyyy\"\n              margin=\"normal\"\n              id=\"date-picker-inline\"\n              value={selectedDateFrom}\n              onChange={handleDateFromChange}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n              /* style={{width: 180, marginBottom: \"20px\", marginRight: \"20px\"}} */\n              disableToolbar\n            />\n          </MuiPickersUtilsProvider>\n          <span className=\"AppText\">по</span>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              variant=\"inline\"\n              format=\"dd-MM-yyyy\"\n              margin=\"normal\"\n              id=\"date-picker-inline2\"\n              value={selectedDateTo}\n              onChange={handleDateToChange}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n              /* style={{width: 180, marginBottom: \"20px\"}} */\n              disableToolbar\n            />\n          </MuiPickersUtilsProvider>\n\n          <Button variant=\"outlined\" onClick={setSelectDate}>\n            Filter\n          </Button>\n        </div>\n      </Grid>\n\n      <Grid item xs={12}>\n        <Paper className={classes.Paper}>\n          <TaskInput />\n        </Paper>\n      </Grid>\n\n      <Grid item xs={12}>\n        <Grid container style={{ display: 'block' }}>\n          <ListWrapper\n            isListDone={false}\n            selectedDateFrom={selectDateFrom}\n            selectedDateTo={selectDateTo}\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.tsx",["199"],"import React, { useState } from 'react';\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/moment';\nimport { useStyles } from './CompletedTasks.styles';\nimport { Grid } from '@material-ui/core';\nimport { ListWrapper } from '../components/TaskListWrapper';\nimport { DateType } from '@date-io/type';\n\nconst styles = {\n  Paper: {\n    padding: 20,\n    margin: 'auto',\n    textAlign: 'center',\n    width: 500,\n  },\n};\n\nexport const CompletedTasks: React.FC = () => {\n  const classes = useStyles();\n\n  const [selectedDateFrom, setSelectedDateFrom] = useState<DateType | null>(\n    new Date('2021-01-01')\n  );\n  const [selectedDateTo, setSelectedDateTo] = useState<DateType | null>(\n    new Date('2021-10-31')\n  );\n\n  const handleDateFromChange = (date: DateType | null) => {\n    setSelectedDateFrom(date);\n  };\n  const handleDateToChange = (date: DateType | null) => {\n    setSelectedDateTo(date);\n  };\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={12}>\n        <div className={classes.CompletedDateFilter}>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              margin=\"normal\"\n              format=\"yyyy-MM-dd\"\n              variant=\"inline\"\n              value={selectedDateFrom}\n              onChange={handleDateFromChange}\n              KeyboardButtonProps={{ 'aria-label': 'change date' }}\n            />\n          </MuiPickersUtilsProvider>\n\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              margin=\"normal\"\n              format=\"yyyy-MM-dd\"\n              variant=\"inline\"\n              value={selectedDateTo}\n              onChange={handleDateToChange}\n              KeyboardButtonProps={{ 'aria-label': 'change date' }}\n            />\n          </MuiPickersUtilsProvider>\n        </div>\n      </Grid>\n\n      <Grid item xs={12}>\n        <Grid container>\n          <ListWrapper\n            isListDone\n            selectedDateFrom={selectedDateFrom}\n            selectedDateTo={selectedDateTo}\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoriesList.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoryCreator.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.tsx",["200"],"import React, { useEffect, useState } from 'react';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { addTask, actions } from '../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getCategoriesFromState,\n  getNewTaskText,\n  selectDefaultCategoryId,\n} from '../redux/selectors/selectors';\nimport { Select } from '@material-ui/core';\nimport { Icon } from './Icon';\nimport { useStyles } from './TaskInput.styles';\nimport { newTaskParamsType } from '../types/types';\n\n/* export type InputPropsType = {\n  onKeyPress: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  value: string;\n  onChange: (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => void;\n  placeholder: string;\n}; */\n\nconst TaskInput: React.FC = () => {\n  const classes = useStyles();\n\n  const newTaskText = useSelector(getNewTaskText);\n  const categories = useSelector(getCategoriesFromState);\n  const categoryId = useSelector(selectDefaultCategoryId);\n  const [open, setOpen] = useState<boolean>(false);\n  const [category, setCategory] = useState<number | null>(categoryId);\n  const [taskDate, setTaskDate] = useState(new Date(Date.now()));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setCategory(categoryId);\n  }, [categoryId]);\n\n  const onOpen = () => {\n    setOpen(true);\n  };\n\n  const onClose = () => {\n    setOpen(false);\n  };\n\n  const newTaskParams: newTaskParamsType = {\n    title: newTaskText,\n    isDone: false,\n    isEdit: false,\n    categoryId: categoryId,\n    isFavorite: false,\n    date: taskDate.valueOf(),\n  };\n\n  const addHandleEnter = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if (newTaskText && newTaskText.length < 30 && event.key === 'Enter') {\n      dispatch(addTask(newTaskParams));\n    }\n  };\n\n  const inputChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    const { value } = event.target;\n    const text = value;\n    dispatch(actions.updateNewMessageText(text));\n  };\n\n  const handleChangeCategory = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    dispatch(actions.setCategory(event.target.value as number));\n  };\n  return (\n    <div className={classes.todoForm}>\n      <Input\n        value={newTaskText}\n        onChange={inputChange}\n        onKeyPress={addHandleEnter}\n        placeholder=\"Todo\"\n        style={{ width: '90%' }}\n      />\n      {/* {category !== null ? ( */}\n      <Select\n        onOpen={onOpen}\n        onClose={onClose}\n        onChange={handleChangeCategory}\n        value={category}\n      >\n        {categories.map(({ id, color, icon, name }) => (\n          <MenuItem key={id} value={id}>\n            <>\n              <Icon color={color} icon={icon} />\n              {open && name}\n            </>\n          </MenuItem>\n        ))}\n      </Select>\n      {/*  ) : null} */}\n      <Button\n        type=\"submit\"\n        disabled={newTaskText.length === 0 || newTaskText.length > 30}\n        variant=\"contained\"\n        color=\"primary\"\n        style={{ width: '10%' }}\n        onClick={() => {\n          newTaskText &&\n            newTaskText.length < 10 &&\n            dispatch(addTask(newTaskParams));\n        }}\n      >\n        Add\n      </Button>\n    </div>\n  );\n};\n\nexport default TaskInput;\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Category.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Categories.styles.ts",["201","202"],"import { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nconst theme = createMuiTheme({\n  breakpoints: {\n    values: {\n      xs: 340,\n      sm: 650,\n      md: 960,\n      lg: 1280,\n      xl: 1920,\n    },\n  },\n});\n\nexport const useStyles = makeStyles({\n  CategoryPageContainer: {\n    minHeight: '48px',\n    minWidth: '200px',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    flexDirection: 'column',\n    [theme.breakpoints.up('xs')]: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n  },\n  CategoryParams: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '300px',\n  },\n  CategoryTitle: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  categoryTitleWithEdit: {\n    display: 'flex',\n    justifyContent: 'center',\n    '&:hover': {\n      cursor: 'pointer',\n      textDecoration: 'underline',\n    },\n  },\n  CategoryParamsName: {\n    marginLeft: '10px',\n  },\n  CategoryPageRow: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n});\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskListWrapper.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Filter.tsx",["203"],"import { MenuItem, Select } from '@material-ui/core';\nimport Switch from '@material-ui/core/Switch';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getCategoriesFromState } from '../redux/selectors/selectors';\nimport { Icon } from './Icon';\nimport { useStyles } from './TaskListWrapper.styles';\n\ntype SwitchesType = {\n  title: string;\n  checked: boolean;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\ntype FilterType = {\n  onNameSortChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onDateSortChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  nameSort: boolean;\n  dateSort: boolean;\n  categoryId: string | string[] | null;\n  setCategoryId: (categoryId: string | string[] | null) => void;\n};\n\nconst Filter: React.FC<FilterType> = ({\n  onNameSortChange,\n  onDateSortChange,\n  nameSort,\n  dateSort,\n  categoryId,\n  setCategoryId,\n}) => {\n  const [opened, setOpened] = useState(false);\n  const categories = useSelector(getCategoriesFromState);\n  const classes = useStyles();\n\n  const onOpen = () => {\n    setOpened(true);\n  };\n\n  const onClose = () => {\n    setOpened(false);\n  };\n\n  const handleChangeCategory = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    event.target.value !== 51\n      ? setCategoryId(`${event.target.value}`)\n      : setCategoryId(null);\n  };\n\n  const completedTasksSwitches: SwitchesType[] = [\n    {\n      title: 'Sort Task by date',\n      checked: dateSort,\n      onChange: onDateSortChange,\n    },\n    {\n      title: 'Sort Task by name',\n      checked: nameSort,\n      onChange: onNameSortChange,\n    },\n  ];\n\n  return (\n    <div>\n      <div className=\"AppCategory\">\n        <Select\n          onOpen={onOpen}\n          onClose={onClose}\n          onChange={handleChangeCategory}\n          value={categoryId}\n        >\n          {categories.map(({ id, color, icon, name }) => (\n            <MenuItem key={id} value={id}>\n              <>\n                <Icon color={color} icon={icon} />\n                {opened && name}\n              </>\n            </MenuItem>\n          ))}\n          <MenuItem value={51}>Clear</MenuItem>\n        </Select>\n      </div>\n      <div className=\"AppSwitches\">\n        {completedTasksSwitches.map(({ checked, onChange, title }, index) => (\n          <div key={index}>\n            <span>{title}</span>\n            <Switch\n              checked={checked}\n              onChange={onChange}\n              color=\"default\"\n              name=\"checkedB\"\n              inputProps={{ 'aria-label': 'checkbox with default color' }}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Filter;\n","/home/alexandr/ToDoList/alexandr-testwork/src/hooks/ListHook.tsx",["204","205"],"import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getTasksFromState,\n  getCategoriesFromState,\n  getIsFetching,\n  getEndNumber,\n} from '../redux/selectors/selectors';\nimport { getDefaultCategory, getCategories } from '../redux/actions';\nimport { useHistory } from 'react-router-dom';\n\nconst ListHook = () => {\n  const history = useHistory();\n\n  const dispatch = useDispatch();\n  const tasks = useSelector(getTasksFromState);\n\n  const unDoneTasks = useSelector(getTasksFromState);\n  const categories = useSelector(getCategoriesFromState);\n  const isFetching = useSelector(getIsFetching);\n  const endNumber = useSelector(getEndNumber);\n\n  useEffect(() => {\n    dispatch(getCategories());\n    dispatch(getDefaultCategory());\n  }, []);\n\n  return {\n    tasks,\n    unDoneTasks,\n    categories,\n    isFetching,\n    dispatch,\n    endNumber,\n    history,\n  };\n};\n\nexport default ListHook;\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/Preloader/Preloader.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Preloader/Preloader.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskButton.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/navTabs.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.tsx",["206"],"import React from 'react';\nimport { useStyles } from './AppNavbar.styles';\nimport { NavLink } from 'react-router-dom';\nimport { navTabs } from './utils/navTabs';\n\nexport const AppNavbar = () => {\n  const classes = useStyles();\n\n  return (\n    <nav className={classes.navbar}>\n      <div className={classes.navbarContainer}>\n        {navTabs.map(({ to, title }) => (\n          <NavLink className={classes.navLinks} to={to} key={to}>\n            {title}\n          </NavLink>\n        ))}\n      </div>\n    </nav>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskList.styles.ts",[],{"ruleId":"207","severity":1,"message":"208","line":121,"column":38,"nodeType":"209","messageId":"210","endLine":121,"endColumn":40},{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","severity":1,"message":"216","line":25,"column":13,"nodeType":"209","messageId":"217","endLine":25,"endColumn":36},{"ruleId":"215","severity":1,"message":"216","line":32,"column":3,"nodeType":"218","messageId":"217","endLine":32,"endColumn":25},{"ruleId":"215","severity":1,"message":"216","line":36,"column":12,"nodeType":"209","messageId":"217","endLine":36,"endColumn":49},{"ruleId":"215","severity":1,"message":"216","line":39,"column":15,"nodeType":"209","messageId":"217","endLine":39,"endColumn":52},{"ruleId":"215","severity":1,"message":"216","line":47,"column":23,"nodeType":"209","messageId":"217","endLine":47,"endColumn":74},{"ruleId":"215","severity":1,"message":"216","line":53,"column":18,"nodeType":"209","messageId":"217","endLine":53,"endColumn":23},{"ruleId":"215","severity":1,"message":"216","line":58,"column":23,"nodeType":"209","messageId":"217","endLine":58,"endColumn":28},{"ruleId":"215","severity":1,"message":"216","line":63,"column":19,"nodeType":"209","messageId":"217","endLine":63,"endColumn":34},{"ruleId":"215","severity":1,"message":"216","line":65,"column":19,"nodeType":"209","messageId":"217","endLine":65,"endColumn":69},{"ruleId":"215","severity":1,"message":"216","line":69,"column":26,"nodeType":"209","messageId":"217","endLine":69,"endColumn":53},{"ruleId":"215","severity":1,"message":"216","line":73,"column":16,"nodeType":"209","messageId":"217","endLine":73,"endColumn":61},{"ruleId":"219","severity":1,"message":"220","line":10,"column":29,"nodeType":"221","messageId":"222","endLine":10,"endColumn":32,"suggestions":"223"},{"ruleId":"224","severity":1,"message":"225","line":37,"column":6,"nodeType":"226","endLine":37,"endColumn":8,"suggestions":"227"},{"ruleId":"215","severity":1,"message":"216","line":3,"column":34,"nodeType":"209","messageId":"217","endLine":3,"endColumn":58},{"ruleId":"215","severity":1,"message":"216","line":4,"column":38,"nodeType":"209","messageId":"217","endLine":4,"endColumn":62},{"ruleId":"215","severity":1,"message":"216","line":6,"column":31,"nodeType":"209","messageId":"217","endLine":6,"endColumn":55},{"ruleId":"215","severity":1,"message":"216","line":8,"column":35,"nodeType":"209","messageId":"217","endLine":8,"endColumn":59},{"ruleId":"215","severity":1,"message":"216","line":10,"column":39,"nodeType":"209","messageId":"217","endLine":10,"endColumn":63},{"ruleId":"215","severity":1,"message":"216","line":12,"column":39,"nodeType":"209","messageId":"217","endLine":12,"endColumn":63},{"ruleId":"215","severity":1,"message":"216","line":13,"column":30,"nodeType":"209","messageId":"217","endLine":13,"endColumn":54},{"ruleId":"215","severity":1,"message":"216","line":14,"column":40,"nodeType":"209","messageId":"217","endLine":14,"endColumn":64},{"ruleId":"215","severity":1,"message":"216","line":16,"column":34,"nodeType":"209","messageId":"217","endLine":16,"endColumn":58},{"ruleId":"215","severity":1,"message":"216","line":17,"column":29,"nodeType":"209","messageId":"217","endLine":17,"endColumn":53},{"ruleId":"228","severity":1,"message":"229","line":14,"column":10,"nodeType":"230","messageId":"231","endLine":14,"endColumn":14},{"ruleId":"224","severity":1,"message":"232","line":89,"column":6,"nodeType":"226","endLine":89,"endColumn":8,"suggestions":"233"},{"ruleId":"224","severity":1,"message":"234","line":109,"column":6,"nodeType":"226","endLine":109,"endColumn":61,"suggestions":"235"},{"ruleId":"215","severity":1,"message":"216","line":6,"column":13,"nodeType":"209","messageId":"217","endLine":6,"endColumn":18},{"ruleId":"228","severity":1,"message":"229","line":2,"column":10,"nodeType":"230","messageId":"231","endLine":2,"endColumn":14},{"ruleId":"228","severity":1,"message":"236","line":4,"column":8,"nodeType":"230","messageId":"231","endLine":4,"endColumn":16},{"ruleId":"224","severity":1,"message":"237","line":36,"column":6,"nodeType":"226","endLine":36,"endColumn":13,"suggestions":"238"},{"ruleId":"228","severity":1,"message":"239","line":14,"column":7,"nodeType":"230","messageId":"231","endLine":14,"endColumn":13},{"ruleId":"228","severity":1,"message":"239","line":12,"column":7,"nodeType":"230","messageId":"231","endLine":12,"endColumn":13},{"ruleId":"228","severity":1,"message":"240","line":34,"column":20,"nodeType":"230","messageId":"231","endLine":34,"endColumn":31},{"ruleId":"228","severity":1,"message":"241","line":1,"column":22,"nodeType":"230","messageId":"231","endLine":1,"endColumn":32},{"ruleId":"228","severity":1,"message":"242","line":2,"column":8,"nodeType":"230","messageId":"231","endLine":2,"endColumn":14},{"ruleId":"228","severity":1,"message":"243","line":34,"column":9,"nodeType":"230","messageId":"231","endLine":34,"endColumn":16},{"ruleId":"215","severity":1,"message":"216","line":12,"column":18,"nodeType":"209","messageId":"217","endLine":12,"endColumn":23},{"ruleId":"224","severity":1,"message":"225","line":26,"column":6,"nodeType":"226","endLine":26,"endColumn":8,"suggestions":"244"},{"ruleId":"215","severity":1,"message":"216","line":6,"column":26,"nodeType":"209","messageId":"217","endLine":6,"endColumn":31},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-native-reassign",["245"],"no-negated-in-lhs",["246"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","missingReturnType","FunctionExpression","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["247","248"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["249"],"@typescript-eslint/no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'parsed._sort'. Either include it or remove the dependency array.",["250"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'isListDone', and 'locationPath.pathname'. Either include them or remove the dependency array.",["251"],"'FlipMove' is defined but never used.","React Hook useEffect has a missing dependency: 'isListDone'. Either include it or remove the dependency array. If 'setSortTasks' needs the current value of 'isListDone', you can also switch to useReducer instead of useState and read 'isListDone' in the reducer.",["252"],"'styles' is assigned a value but never used.","'setTaskDate' is assigned a value but never used.","'withStyles' is defined but never used.","'Button' is defined but never used.","'classes' is assigned a value but never used.",["253"],"no-global-assign","no-unsafe-negation",{"messageId":"254","fix":"255","desc":"256"},{"messageId":"257","fix":"258","desc":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"260","fix":"268"},"suggestUnknown",{"range":"269","text":"270"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"269","text":"271"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.","Update the dependencies array to be: [dispatch]",{"range":"272","text":"273"},"Update the dependencies array to be: [parsed._sort]",{"range":"274","text":"275"},"Update the dependencies array to be: [dateSort, nameSort, categoryId, end, dateFrom, dateTo, history, locationPath.pathname, dispatch, isListDone]",{"range":"276","text":"277"},"Update the dependencies array to be: [isListDone, tasks]",{"range":"278","text":"279"},{"range":"280","text":"273"},[404,407],"unknown","never",[1361,1363],"[dispatch]",[2824,2826],"[parsed._sort]",[3403,3458],"[dateSort, nameSort, categoryId, end, dateFrom, dateTo, history, locationPath.pathname, dispatch, isListDone]",[1024,1031],"[isListDone, tasks]",[779,781]]