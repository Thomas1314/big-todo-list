[{"/home/alexandr/category/alexandr-testwork/src/index.js":"1","/home/alexandr/category/alexandr-testwork/src/redux/store.js":"2","/home/alexandr/category/alexandr-testwork/src/App.jsx":"3","/home/alexandr/category/alexandr-testwork/src/redux/reducers/reducer.js":"4","/home/alexandr/category/alexandr-testwork/src/utils/routes.js":"5","/home/alexandr/category/alexandr-testwork/src/AppNavbar.jsx":"6","/home/alexandr/category/alexandr-testwork/src/AppNavbar.styles.js":"7","/home/alexandr/category/alexandr-testwork/src/pages/CompletedTasks.jsx":"8","/home/alexandr/category/alexandr-testwork/src/pages/Main.jsx":"9","/home/alexandr/category/alexandr-testwork/src/pages/Settings.jsx":"10","/home/alexandr/category/alexandr-testwork/src/pages/CompletedTasks.styles.js":"11","/home/alexandr/category/alexandr-testwork/src/pages/Main.styles.js":"12","/home/alexandr/category/alexandr-testwork/src/pages/Settings.styles.js":"13","/home/alexandr/category/alexandr-testwork/src/redux/actions.js":"14","/home/alexandr/category/alexandr-testwork/src/redux/selectors/selectors.js":"15","/home/alexandr/category/alexandr-testwork/src/components/TaskList.jsx":"16","/home/alexandr/category/alexandr-testwork/src/components/Icon.jsx":"17","/home/alexandr/category/alexandr-testwork/src/components/CategoriesList.jsx":"18","/home/alexandr/category/alexandr-testwork/src/components/TaskInput.jsx":"19","/home/alexandr/category/alexandr-testwork/src/components/CategoryCreator.jsx":"20","/home/alexandr/category/alexandr-testwork/src/utils/colors.js":"21","/home/alexandr/category/alexandr-testwork/src/utils/icons.js":"22","/home/alexandr/category/alexandr-testwork/src/hooks/ListHook.js":"23","/home/alexandr/category/alexandr-testwork/src/components/TaskItem.jsx":"24","/home/alexandr/category/alexandr-testwork/src/components/Category.jsx":"25","/home/alexandr/category/alexandr-testwork/src/components/TaskButton.jsx":"26","/home/alexandr/category/alexandr-testwork/src/utils/navLinks.js":"27","/home/alexandr/category/alexandr-testwork/src/components/Categories.styles.js":"28","/home/alexandr/category/alexandr-testwork/src/components/TaskInput.styles.js":"29","/home/alexandr/category/alexandr-testwork/src/api/api.js":"30"},{"size":296,"mtime":1621865892174,"results":"31","hashOfConfig":"32"},{"size":201,"mtime":1621579124843,"results":"33","hashOfConfig":"32"},{"size":452,"mtime":1621865160383,"results":"34","hashOfConfig":"32"},{"size":4078,"mtime":1621925868436,"results":"35","hashOfConfig":"32"},{"size":385,"mtime":1621932881803,"results":"36","hashOfConfig":"32"},{"size":518,"mtime":1621865456070,"results":"37","hashOfConfig":"32"},{"size":419,"mtime":1621865267232,"results":"38","hashOfConfig":"32"},{"size":1922,"mtime":1621865940879,"results":"39","hashOfConfig":"32"},{"size":3030,"mtime":1621864588414,"results":"40","hashOfConfig":"32"},{"size":3184,"mtime":1621928896712,"results":"41","hashOfConfig":"32"},{"size":243,"mtime":1621925762740,"results":"42","hashOfConfig":"32"},{"size":459,"mtime":1621925779136,"results":"43","hashOfConfig":"32"},{"size":1315,"mtime":1621925797712,"results":"44","hashOfConfig":"32"},{"size":3238,"mtime":1621931251544,"results":"45","hashOfConfig":"32"},{"size":593,"mtime":1621931288949,"results":"46","hashOfConfig":"32"},{"size":763,"mtime":1621865822250,"results":"47","hashOfConfig":"32"},{"size":352,"mtime":1621865666332,"results":"48","hashOfConfig":"32"},{"size":576,"mtime":1621928810548,"results":"49","hashOfConfig":"32"},{"size":2794,"mtime":1621932863231,"results":"50","hashOfConfig":"32"},{"size":4244,"mtime":1621864098618,"results":"51","hashOfConfig":"32"},{"size":75,"mtime":1621925885980,"results":"52","hashOfConfig":"32"},{"size":69,"mtime":1621925899300,"results":"53","hashOfConfig":"32"},{"size":756,"mtime":1621864397744,"results":"54","hashOfConfig":"32"},{"size":3854,"mtime":1621863754179,"results":"55","hashOfConfig":"32"},{"size":3159,"mtime":1621865631904,"results":"56","hashOfConfig":"32"},{"size":266,"mtime":1621865695205,"results":"57","hashOfConfig":"32"},{"size":187,"mtime":1621865379390,"results":"58","hashOfConfig":"32"},{"size":1137,"mtime":1621865592456,"results":"59","hashOfConfig":"32"},{"size":146,"mtime":1621865820614,"results":"60","hashOfConfig":"32"},{"size":1420,"mtime":1621933531152,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1ejqns2",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alexandr/category/alexandr-testwork/src/index.js",[],["129","130"],"/home/alexandr/category/alexandr-testwork/src/redux/store.js",[],"/home/alexandr/category/alexandr-testwork/src/App.jsx",[],"/home/alexandr/category/alexandr-testwork/src/redux/reducers/reducer.js",[],"/home/alexandr/category/alexandr-testwork/src/utils/routes.js",[],"/home/alexandr/category/alexandr-testwork/src/AppNavbar.jsx",[],"/home/alexandr/category/alexandr-testwork/src/AppNavbar.styles.js",[],"/home/alexandr/category/alexandr-testwork/src/pages/CompletedTasks.jsx",["131"],"import React, { useState } from 'react';\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\nimport { List } from './../components/TaskList';\nimport DateFnsUtils from '@date-io/moment';\nimport { useStyles } from './CompletedTasks.styles';\nimport { Paper, Grid } from '@material-ui/core';\n\nconst styles = {\n  Paper: {\n    padding: 20,\n    margin: 'auto',\n    textAlign: 'center',\n    width: 500,\n  },\n};\n\nexport const CompletedTasks = () => {\n  const classes = useStyles();\n\n  const [selectedDateFrom, setSelectedDateFrom] = useState(\n    new Date('2021-01-01')\n  );\n\n  const [selectedDateTo, setSelectedDateTo] = useState(new Date('2021-10-31'));\n\n  const handleDateFromChange = (date) => {\n    setSelectedDateFrom(date);\n  };\n\n  const handleDateToChange = (date) => {\n    setSelectedDateTo(date);\n  };\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={12}>\n        <div className={classes.CompletedDateFilter}>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              margin=\"normal\"\n              format=\"yyyy-MM-dd\"\n              variant=\"inline\"\n              value={selectedDateFrom}\n              onChange={handleDateFromChange}\n              KeyboardButtonProps={{ 'aria-label': 'change date' }}\n            />\n          </MuiPickersUtilsProvider>\n\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              margin=\"normal\"\n              format=\"yyyy-MM-dd\"\n              variant=\"inline\"\n              value={selectedDateTo}\n              onChange={handleDateToChange}\n              KeyboardButtonProps={{ 'aria-label': 'change date' }}\n            />\n          </MuiPickersUtilsProvider>\n        </div>\n      </Grid>\n\n      <Grid item xs={12} style={styles.Paper}>\n        <Grid container>\n          <List isListDone />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n","/home/alexandr/category/alexandr-testwork/src/pages/Main.jsx",["132","133"],"import { Button } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\nimport TaskInput from '../components/TaskInput';\nimport { List } from './../components/TaskList';\nimport { Paper, Grid } from '@material-ui/core';\nimport DateFnsUtils from '@date-io/moment';\nimport { useStyles } from './Main.styles';\n\nconst styles = {\n  Paper: {\n    padding: 20,\n    margin: 'auto',\n    textAlign: 'center',\n    width: 500,\n  },\n};\n\nexport const Main = () => {\n  const classes = useStyles();\n\n  const [taskDate, setTaskDate] = useState(new Date(Date.now()));\n  const [selectedDateFrom, setSelectedDateFrom] = useState(null);\n\n  const [selectedDateTo, setSelectedDateTo] = useState(null);\n\n  const [selectDateFrom, setSelectDateFrom] = useState(null);\n\n  const [selectDateTo, setSelectDateTo] = useState(null);\n\n  const handleDateFromChange = (date) => {\n    setSelectedDateFrom(date);\n  };\n\n  const handleDateToChange = (date) => {\n    setSelectedDateTo(date);\n  };\n\n  const setSelectDate = () => {\n    setSelectDateFrom(selectedDateFrom);\n    setSelectDateTo(selectedDateTo);\n  };\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={12}>\n        <div className={classes.MainListDateFilter}>\n          <span className=\"AppText\">с</span>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              variant=\"inline\"\n              format=\"dd-MM-yyyy\"\n              margin=\"normal\"\n              id=\"date-picker-inline\"\n              value={selectedDateFrom}\n              onChange={handleDateFromChange}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n              /* style={{width: 180, marginBottom: \"20px\", marginRight: \"20px\"}} */\n              disableToolbar\n            />\n          </MuiPickersUtilsProvider>\n          <span className=\"AppText\">по</span>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              variant=\"inline\"\n              format=\"dd-MM-yyyy\"\n              margin=\"normal\"\n              id=\"date-picker-inline2\"\n              value={selectedDateTo}\n              onChange={handleDateToChange}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n              /* style={{width: 180, marginBottom: \"20px\"}} */\n              disableToolbar\n            />\n          </MuiPickersUtilsProvider>\n\n          <Button variant=\"outlined\" onClick={setSelectDate}>\n            Filter\n          </Button>\n        </div>\n      </Grid>\n\n      <Grid item xs={12}>\n        <Paper style={styles.Paper}>\n          <TaskInput />\n        </Paper>\n      </Grid>\n\n      <Grid item xs={12} style={styles.Paper}>\n        <Grid container>\n          <List\n            isListDone={false}\n            selectedDateFrom={selectDateFrom}\n            selectedDateTo={selectDateTo}\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n","/home/alexandr/category/alexandr-testwork/src/pages/Settings.jsx",["134"],"import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Select } from '@material-ui/core';\nimport { Icon } from './../components/Icon';\nimport { CategoriesList } from './../components/CategoriesList';\nimport { CategoryCreator } from './../components/CategoryCreator';\nimport {\n  getCategoriesFromState,\n  selectDefaultCategoryID,\n} from '../redux/selectors/selectors';\nimport {\n  actions,\n  getCategories,\n  getDefaultCategory,\n  updateDefaultCategory,\n} from '../redux/actions';\nimport useStyles from './Settings.styles';\n\nexport const Settings = () => {\n  const classes = useStyles();\n  const categories = useSelector(getCategoriesFromState);\n  const categoryId = useSelector(selectDefaultCategoryID);\n  const [category, setCategory] = useState(categoryId);\n  const [opened, setOpened] = useState(false);\n  const [edit, setEdit] = useState(false);\n  const [editCategoryId, setEditCategoryId] = useState(null);\n  const [button, setButton] = useState('black');\n  const [choosesIcon, setChoosesIcon] = useState('home');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCategories());\n    dispatch(getDefaultCategory());\n  }, []);\n\n  useEffect(() => {\n    setCategory(categoryId);\n  }, [categoryId]);\n\n  const onOpen = () => {\n    setOpened(true);\n  };\n  const onClose = () => {\n    setOpened(false);\n  };\n\n  const handleChangeCategory = (event) => {\n    dispatch(actions.setCategory(event.target.value));\n    dispatch(updateDefaultCategory(event.target.value));\n  };\n\n  return (\n    <div>\n      <h1 className={classes.SettingsMainTitle}>Settings</h1>\n      <div className={classes.SettingsPageContainer}>\n        <div>\n          <h2>{edit ? 'Edit Icon' : 'Categories Maker'}</h2>\n          <CategoryCreator\n            edit={edit}\n            editCategoryId={editCategoryId}\n            setEditCategoryId={setEditCategoryId}\n            setEdit={setEdit}\n            setButton={setButton}\n            setChoosesIcon={setChoosesIcon}\n            button={button}\n            choosesIcon={choosesIcon}\n          />\n        </div>\n        <div className={classes.SettingsPageCategories}>\n          <div>\n            <h2>Categories</h2>\n          </div>\n          <CategoriesList\n            categories={categories}\n            setEdit={setEdit}\n            setEditCategoryId={setEditCategoryId}\n            editCategoryId={editCategoryId}\n            setButton={setButton}\n            setChoosesIcon={setChoosesIcon}\n          />\n          <h4>Default category: </h4>\n          {category !== null ? (\n            <Select\n              onOpen={onOpen}\n              onClose={onClose}\n              onChange={handleChangeCategory}\n              value={category}\n            >\n              {categories.map(({ id, color, icon, name }) => (\n                <MenuItem key={id} value={id}>\n                  <>\n                    <Icon color={color} icon={icon} />\n                    {opened && name}\n                  </>\n                </MenuItem>\n              ))}\n            </Select>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/alexandr/category/alexandr-testwork/src/pages/CompletedTasks.styles.js",[],"/home/alexandr/category/alexandr-testwork/src/pages/Main.styles.js",[],"/home/alexandr/category/alexandr-testwork/src/pages/Settings.styles.js",[],"/home/alexandr/category/alexandr-testwork/src/redux/actions.js",[],"/home/alexandr/category/alexandr-testwork/src/redux/selectors/selectors.js",[],"/home/alexandr/category/alexandr-testwork/src/components/TaskList.jsx",["135"],"import React, { useEffect, useState } from 'react';\nimport { Grid } from '@material-ui/core';\nimport TaskItem from './TaskItem';\nimport ListHook from '../hooks/ListHook';\n\nexport const List = ({ isListDone }) => {\n  const { tasks, categories } = ListHook();\n  const [sortTasks, setSortTasks] = useState(tasks);\n\n  useEffect(() => {\n    setSortTasks(\n      tasks\n        .filter((task) => task.isDone === isListDone)\n        .sort((a) => (a.isFavorite ? -1 : 1))\n    );\n  }, [tasks]);\n\n  return (\n    <Grid container>\n      {sortTasks.map((task) => {\n        return (\n          <TaskItem\n            key={task.id}\n            task={task}\n            isListDone={isListDone}\n            categories={categories}\n          />\n        );\n      })}\n    </Grid>\n  );\n};\n","/home/alexandr/category/alexandr-testwork/src/components/Icon.jsx",[],"/home/alexandr/category/alexandr-testwork/src/components/CategoriesList.jsx",[],"/home/alexandr/category/alexandr-testwork/src/components/TaskInput.jsx",["136"],"import React, { useEffect, useState } from 'react';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { addTask, actions } from '../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getCategoriesFromState,\n  getNewTaskText,\n  selectDefaultCategoryID,\n} from '../redux/selectors/selectors';\nimport { Select } from '@material-ui/core';\nimport { Icon } from './Icon';\nimport { useStyles } from './TaskInput.styles';\n\nconst TaskInput = () => {\n  const classes = useStyles();\n\n  const newTaskText = useSelector(getNewTaskText);\n  const categories = useSelector(getCategoriesFromState);\n  const categoryID = useSelector(selectDefaultCategoryID);\n  const [open, setOpen] = useState(false);\n  const [category, setCategory] = useState(categoryID);\n  const [taskDate, setTaskDate] = useState(new Date(Date.now()));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setCategory(categoryID);\n  }, [categoryID]);\n\n  const onOpen = () => {\n    setOpen(true);\n  };\n\n  const onClose = () => {\n    setOpen(false);\n  };\n\n  const newTaskParams = {\n    title: newTaskText,\n    isDone: false,\n    isEdit: false,\n    categoryID: categoryID,\n    isFavorite: false,\n    date: taskDate.valueOf(),\n  };\n\n  const addHandleEnter = (event) => {\n    if (newTaskText && newTaskText.length < 30 && event.key === 'Enter') {\n      dispatch(addTask(newTaskParams));\n    }\n  };\n\n  const inputChange = (event) => {\n    const { value } = event.target;\n    const text = value;\n    dispatch(actions.updateNewMessageText(text));\n  };\n\n  const handleChangeCategory = (event) => {\n    dispatch(actions.setCategory(event.target.value));\n  };\n  debugger;\n  return (\n    <div className={classes.todoForm}>\n      <Input\n        value={newTaskText}\n        onChange={inputChange}\n        onKeyPress={addHandleEnter}\n        placeholder=\"Todo\"\n        style={{ width: '90%' }}\n      />\n      <Select\n        onOpen={onOpen}\n        onClose={onClose}\n        onChange={handleChangeCategory}\n        value={category}\n      >\n        {categories.map(({ id, color, icon, name }) => (\n          <MenuItem key={id} value={id}>\n            <>\n              <Icon color={color} icon={icon} />\n              {open && name}\n            </>\n          </MenuItem>\n        ))}\n      </Select>\n\n      <Button\n        type=\"submit\"\n        disabled={newTaskText.length === 0 || newTaskText.length > 30}\n        variant=\"contained\"\n        color=\"primary\"\n        style={{ width: '10%' }}\n        onClick={() => {\n          newTaskText &&\n            newTaskText.length < 10 &&\n            dispatch(addTask(newTaskParams));\n        }}\n      >\n        Add\n      </Button>\n    </div>\n  );\n};\n\nexport default TaskInput;\n","/home/alexandr/category/alexandr-testwork/src/components/CategoryCreator.jsx",[],"/home/alexandr/category/alexandr-testwork/src/utils/colors.js",[],"/home/alexandr/category/alexandr-testwork/src/utils/icons.js",[],"/home/alexandr/category/alexandr-testwork/src/hooks/ListHook.js",[],"/home/alexandr/category/alexandr-testwork/src/components/TaskItem.jsx",[],"/home/alexandr/category/alexandr-testwork/src/components/Category.jsx",[],"/home/alexandr/category/alexandr-testwork/src/components/TaskButton.jsx",[],"/home/alexandr/category/alexandr-testwork/src/utils/navLinks.js",[],"/home/alexandr/category/alexandr-testwork/src/components/Categories.styles.js",["137","138"],"import { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nconst theme = createMuiTheme({\n  breakpoints: {\n    values: {\n      xs: 340,\n      sm: 650,\n      md: 960,\n      lg: 1280,\n      xl: 1920,\n    },\n  },\n});\n\nexport const useStyles = makeStyles({\n  CategoryPageContainer: {\n    minHeight: '48px',\n    minWidth: '200px',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    flexDirection: 'column',\n    [theme.breakpoints.up('xs')]: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n  },\n  CategoryParams: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '300px',\n  },\n  CategoryTitle: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  categoryTitleWithEdit: {\n    display: 'flex',\n    justifyContent: 'center',\n    '&:hover': {\n      cursor: 'pointer',\n      textDecoration: 'underline',\n    },\n  },\n  CategoryParamsName: {\n    marginLeft: '10px',\n  },\n  CategoryPageRow: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n});\n","/home/alexandr/category/alexandr-testwork/src/components/TaskInput.styles.js",[],"/home/alexandr/category/alexandr-testwork/src/api/api.js",[],{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":9,"column":10,"nodeType":"145","messageId":"146","endLine":9,"endColumn":15},{"ruleId":"143","severity":1,"message":"147","line":25,"column":10,"nodeType":"145","messageId":"146","endLine":25,"endColumn":18},{"ruleId":"143","severity":1,"message":"148","line":25,"column":20,"nodeType":"145","messageId":"146","endLine":25,"endColumn":31},{"ruleId":"149","severity":1,"message":"150","line":36,"column":6,"nodeType":"151","endLine":36,"endColumn":8,"suggestions":"152"},{"ruleId":"149","severity":1,"message":"153","line":16,"column":6,"nodeType":"151","endLine":16,"endColumn":13,"suggestions":"154"},{"ruleId":"143","severity":1,"message":"148","line":24,"column":20,"nodeType":"145","messageId":"146","endLine":24,"endColumn":31},{"ruleId":"143","severity":1,"message":"155","line":1,"column":22,"nodeType":"145","messageId":"146","endLine":1,"endColumn":32},{"ruleId":"143","severity":1,"message":"156","line":2,"column":8,"nodeType":"145","messageId":"146","endLine":2,"endColumn":14},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'Paper' is defined but never used.","Identifier","unusedVar","'taskDate' is assigned a value but never used.","'setTaskDate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["159"],"React Hook useEffect has a missing dependency: 'isListDone'. Either include it or remove the dependency array. If 'setSortTasks' needs the current value of 'isListDone', you can also switch to useReducer instead of useState and read 'isListDone' in the reducer.",["160"],"'withStyles' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [dispatch]",{"range":"165","text":"166"},"Update the dependencies array to be: [isListDone, tasks]",{"range":"167","text":"168"},[1259,1261],"[dispatch]",[474,481],"[isListDone, tasks]"]