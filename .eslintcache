[{"/home/alexandr/ToDoList/alexandr-testwork/src/index.js":"1","/home/alexandr/ToDoList/alexandr-testwork/src/redux/store.js":"2","/home/alexandr/ToDoList/alexandr-testwork/src/App.jsx":"3","/home/alexandr/ToDoList/alexandr-testwork/src/redux/reducers/reducer.js":"4","/home/alexandr/ToDoList/alexandr-testwork/src/utils/routes.js":"5","/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.jsx":"6","/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.styles.js":"7","/home/alexandr/ToDoList/alexandr-testwork/src/utils/navLinks.js":"8","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.jsx":"9","/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.jsx":"10","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.jsx":"11","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.styles.js":"12","/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.styles.js":"13","/home/alexandr/ToDoList/alexandr-testwork/src/redux/actions.js":"14","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.styles.js":"15","/home/alexandr/ToDoList/alexandr-testwork/src/redux/selectors/selectors.js":"16","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.jsx":"17","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskListWrapper.jsx":"18","/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoriesList.jsx":"19","/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoryCreator.jsx":"20","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskList.jsx":"21","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.styles.js":"22","/home/alexandr/ToDoList/alexandr-testwork/src/utils/QueryParams.js":"23","/home/alexandr/ToDoList/alexandr-testwork/src/components/ListWrapper.styles.js":"24","/home/alexandr/ToDoList/alexandr-testwork/src/utils/colors.js":"25","/home/alexandr/ToDoList/alexandr-testwork/src/utils/icons.js":"26","/home/alexandr/ToDoList/alexandr-testwork/src/hooks/ListHook.js":"27","/home/alexandr/ToDoList/alexandr-testwork/src/components/Filter.jsx":"28","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskItem.jsx":"29","/home/alexandr/ToDoList/alexandr-testwork/src/components/Category.jsx":"30","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskItem.styles.js":"31","/home/alexandr/ToDoList/alexandr-testwork/src/components/Categories.styles.js":"32","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskButton.jsx":"33","/home/alexandr/ToDoList/alexandr-testwork/src/components/Icon.tsx":"34","/home/alexandr/ToDoList/alexandr-testwork/src/api/api.ts":"35"},{"size":296,"mtime":1621865892174,"results":"36","hashOfConfig":"37"},{"size":201,"mtime":1621579124843,"results":"38","hashOfConfig":"37"},{"size":452,"mtime":1621865160383,"results":"39","hashOfConfig":"37"},{"size":4594,"mtime":1622103212907,"results":"40","hashOfConfig":"37"},{"size":385,"mtime":1621932881803,"results":"41","hashOfConfig":"37"},{"size":518,"mtime":1621865456070,"results":"42","hashOfConfig":"37"},{"size":419,"mtime":1621865267232,"results":"43","hashOfConfig":"37"},{"size":187,"mtime":1621865379390,"results":"44","hashOfConfig":"37"},{"size":3098,"mtime":1622116218158,"results":"45","hashOfConfig":"37"},{"size":2097,"mtime":1622116418857,"results":"46","hashOfConfig":"37"},{"size":3102,"mtime":1621945029524,"results":"47","hashOfConfig":"37"},{"size":459,"mtime":1621925779136,"results":"48","hashOfConfig":"37"},{"size":243,"mtime":1621925762740,"results":"49","hashOfConfig":"37"},{"size":3458,"mtime":1622101576210,"results":"50","hashOfConfig":"37"},{"size":1315,"mtime":1621925797712,"results":"51","hashOfConfig":"37"},{"size":649,"mtime":1622124594819,"results":"52","hashOfConfig":"37"},{"size":2833,"mtime":1621943713473,"results":"53","hashOfConfig":"37"},{"size":3524,"mtime":1622120305778,"results":"54","hashOfConfig":"37"},{"size":564,"mtime":1621943695813,"results":"55","hashOfConfig":"37"},{"size":4255,"mtime":1621949558044,"results":"56","hashOfConfig":"37"},{"size":1417,"mtime":1622118836693,"results":"57","hashOfConfig":"37"},{"size":146,"mtime":1621865820614,"results":"58","hashOfConfig":"37"},{"size":143,"mtime":1622109400045,"results":"59","hashOfConfig":"37"},{"size":321,"mtime":1622112623977,"results":"60","hashOfConfig":"37"},{"size":75,"mtime":1621925885980,"results":"61","hashOfConfig":"37"},{"size":69,"mtime":1621925899300,"results":"62","hashOfConfig":"37"},{"size":937,"mtime":1622103624188,"results":"63","hashOfConfig":"37"},{"size":2044,"mtime":1622113022110,"results":"64","hashOfConfig":"37"},{"size":4046,"mtime":1622098559562,"results":"65","hashOfConfig":"37"},{"size":3159,"mtime":1621865631904,"results":"66","hashOfConfig":"37"},{"size":820,"mtime":1622100289981,"results":"67","hashOfConfig":"37"},{"size":1137,"mtime":1621865592456,"results":"68","hashOfConfig":"37"},{"size":266,"mtime":1621865695205,"results":"69","hashOfConfig":"37"},{"size":501,"mtime":1622125148595,"results":"70","hashOfConfig":"37"},{"size":1676,"mtime":1622125582378,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1aijlhl",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":24,"warningCount":0,"fixableErrorCount":24,"fixableWarningCount":0,"source":null},"/home/alexandr/ToDoList/alexandr-testwork/src/index.js",[],["152","153"],"/home/alexandr/ToDoList/alexandr-testwork/src/redux/store.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/App.jsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/redux/reducers/reducer.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/routes.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.jsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.styles.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/navLinks.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.jsx",["154","155","156"],"import { Button } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\nimport TaskInput from '../components/TaskInput';\nimport { List } from './../components/TaskList';\nimport { Paper, Grid } from '@material-ui/core';\nimport DateFnsUtils from '@date-io/moment';\nimport { useStyles } from './Main.styles';\nimport { ListWrapper } from '../components/TaskListWrapper';\n\nconst styles = {\n  Paper: {\n    padding: 20,\n    margin: 'auto',\n    textAlign: 'center',\n    width: 500,\n  },\n};\n\nexport const Main = () => {\n  const classes = useStyles();\n\n  const [taskDate, setTaskDate] = useState(new Date(Date.now()));\n  const [selectedDateFrom, setSelectedDateFrom] = useState(null);\n\n  const [selectedDateTo, setSelectedDateTo] = useState(null);\n\n  const [selectDateFrom, setSelectDateFrom] = useState(null);\n\n  const [selectDateTo, setSelectDateTo] = useState(null);\n\n  const handleDateFromChange = (date) => {\n    setSelectedDateFrom(date);\n  };\n\n  const handleDateToChange = (date) => {\n    setSelectedDateTo(date);\n  };\n\n  const setSelectDate = () => {\n    setSelectDateFrom(selectedDateFrom);\n    setSelectDateTo(selectedDateTo);\n  };\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={12}>\n        <div className={classes.MainListDateFilter}>\n          <span className=\"AppText\">с</span>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              variant=\"inline\"\n              format=\"dd-MM-yyyy\"\n              margin=\"normal\"\n              id=\"date-picker-inline\"\n              value={selectedDateFrom}\n              onChange={handleDateFromChange}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n              /* style={{width: 180, marginBottom: \"20px\", marginRight: \"20px\"}} */\n              disableToolbar\n            />\n          </MuiPickersUtilsProvider>\n          <span className=\"AppText\">по</span>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              variant=\"inline\"\n              format=\"dd-MM-yyyy\"\n              margin=\"normal\"\n              id=\"date-picker-inline2\"\n              value={selectedDateTo}\n              onChange={handleDateToChange}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n              /* style={{width: 180, marginBottom: \"20px\"}} */\n              disableToolbar\n            />\n          </MuiPickersUtilsProvider>\n\n          <Button variant=\"outlined\" onClick={setSelectDate}>\n            Filter\n          </Button>\n        </div>\n      </Grid>\n\n      <Grid item xs={12}>\n        <Paper style={styles.Paper}>\n          <TaskInput />\n        </Paper>\n      </Grid>\n\n      <Grid item xs={12} style={styles.Paper}>\n        <Grid container>\n          <ListWrapper\n            isListDone={false}\n            selectedDateFrom={selectDateFrom}\n            selectedDateTo={selectDateTo}\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.jsx",["157"],"import React, { useState } from 'react';\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\nimport { List } from './../components/TaskList';\nimport DateFnsUtils from '@date-io/moment';\nimport { useStyles } from './CompletedTasks.styles';\nimport { Grid } from '@material-ui/core';\nimport { ListWrapper } from '../components/TaskListWrapper';\n\nconst styles = {\n  Paper: {\n    padding: 20,\n    margin: 'auto',\n    textAlign: 'center',\n    width: 500,\n  },\n};\n\nexport const CompletedTasks = () => {\n  const classes = useStyles();\n\n  const [selectedDateFrom, setSelectedDateFrom] = useState(\n    new Date('2021-01-01')\n  );\n\n  const [selectedDateTo, setSelectedDateTo] = useState(new Date('2021-10-31'));\n\n  const handleDateFromChange = (date) => {\n    setSelectedDateFrom(date);\n  };\n\n  const handleDateToChange = (date) => {\n    setSelectedDateTo(date);\n  };\n\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={12}>\n        <div className={classes.CompletedDateFilter}>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              margin=\"normal\"\n              format=\"yyyy-MM-dd\"\n              variant=\"inline\"\n              value={selectedDateFrom}\n              onChange={handleDateFromChange}\n              KeyboardButtonProps={{ 'aria-label': 'change date' }}\n            />\n          </MuiPickersUtilsProvider>\n\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              margin=\"normal\"\n              format=\"yyyy-MM-dd\"\n              variant=\"inline\"\n              value={selectedDateTo}\n              onChange={handleDateToChange}\n              KeyboardButtonProps={{ 'aria-label': 'change date' }}\n            />\n          </MuiPickersUtilsProvider>\n        </div>\n      </Grid>\n\n      <Grid item xs={12} style={styles.Paper}>\n        <Grid container>\n          <ListWrapper\n            isListDone\n            selectedDateFrom={selectedDateFrom}\n            selectedDateTo={selectedDateTo}\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.jsx",["158"],"import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Select } from '@material-ui/core';\nimport { Icon } from './../components/Icon';\nimport { CategoriesList } from './../components/CategoriesList';\nimport { CategoryCreator } from './../components/CategoryCreator';\nimport {\n  getCategoriesFromState,\n  selectDefaultCategoryID,\n} from '../redux/selectors/selectors';\nimport {\n  actions,\n  getCategories,\n  getDefaultCategory,\n  updateDefaultCategory,\n} from '../redux/actions';\nimport useStyles from './Settings.styles';\n\nexport const Settings = () => {\n  const classes = useStyles();\n  const categories = useSelector(getCategoriesFromState);\n  const categoryId = useSelector(selectDefaultCategoryID);\n  const [category, setCategory] = useState(categoryId);\n  const [opened, setOpened] = useState(false);\n  const [edit, setEdit] = useState(false);\n  const [editCategoryId, setEditCategoryId] = useState(null);\n  const [button, setButton] = useState('black');\n  const [choosesIcon, setChoosesIcon] = useState('home');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCategories());\n    dispatch(getDefaultCategory());\n  }, []);\n\n  useEffect(() => {\n    setCategory(categoryId);\n  }, [categoryId]);\n\n  const onOpen = () => {\n    setOpened(true);\n  };\n  const onClose = () => {\n    setOpened(false);\n  };\n\n  const handleChangeCategory = (event) => {\n    dispatch(actions.setCategory(event.target.value));\n    dispatch(updateDefaultCategory(event.target.value));\n  };\n\n  return (\n    <div>\n      <h1 className={classes.SettingsMainTitle}>Settings</h1>\n      <div className={classes.SettingsPageContainer}>\n        <div>\n          <h2>{edit ? 'Edit Icon' : 'Categories Maker'}</h2>\n          <CategoryCreator\n            edit={edit}\n            editCategoryId={editCategoryId}\n            setEditCategoryId={setEditCategoryId}\n            setEdit={setEdit}\n            setButton={setButton}\n            setChoosesIcon={setChoosesIcon}\n            button={button}\n            choosesIcon={choosesIcon}\n          />\n        </div>\n        <div className={classes.SettingsPageCategories}>\n          <div>\n            <h2>Categories</h2>\n          </div>\n          <CategoriesList\n            categories={categories}\n            setEdit={setEdit}\n            setEditCategoryId={setEditCategoryId}\n            editCategoryId={editCategoryId}\n            setButton={setButton}\n            setChoosesIcon={setChoosesIcon}\n          />\n          <h4>Default category: </h4>\n\n          <Select\n            onOpen={onOpen}\n            onClose={onClose}\n            onChange={handleChangeCategory}\n            value={category}\n          >\n            {categories.map(({ id, color, icon, name }) => (\n              <MenuItem key={id} value={id}>\n                <>\n                  <Icon color={color} icon={icon} />\n                  {opened && name}\n                </>\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.styles.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.styles.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/redux/actions.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.styles.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/redux/selectors/selectors.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.jsx",["159","160"],"import React, { useEffect, useState } from 'react';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { addTask, actions } from '../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getCategoriesFromState,\n  getNewTaskText,\n  selectDefaultCategoryID,\n} from '../redux/selectors/selectors';\nimport { Select } from '@material-ui/core';\nimport { Icon } from './Icon';\nimport { useStyles } from './TaskInput.styles';\n\nconst TaskInput = () => {\n  const classes = useStyles();\n\n  const newTaskText = useSelector(getNewTaskText);\n  const categories = useSelector(getCategoriesFromState);\n  const categoryID = useSelector(selectDefaultCategoryID);\n  const [open, setOpen] = useState(false);\n  const [category, setCategory] = useState(categoryID);\n  const [taskDate, setTaskDate] = useState(new Date(Date.now()));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setCategory(categoryID);\n  }, []);\n\n  const onOpen = () => {\n    setOpen(true);\n  };\n\n  const onClose = () => {\n    setOpen(false);\n  };\n\n  const newTaskParams = {\n    title: newTaskText,\n    isDone: false,\n    isEdit: false,\n    categoryID: categoryID,\n    isFavorite: false,\n    date: taskDate.valueOf(),\n  };\n\n  const addHandleEnter = (event) => {\n    if (newTaskText && newTaskText.length < 30 && event.key === 'Enter') {\n      dispatch(addTask(newTaskParams));\n    }\n  };\n\n  const inputChange = (event) => {\n    const { value } = event.target;\n    const text = value;\n    dispatch(actions.updateNewMessageText(text));\n  };\n\n  const handleChangeCategory = (event) => {\n    dispatch(actions.setCategory(event.target.value));\n  };\n  return (\n    <div className={classes.todoForm}>\n      <Input\n        value={newTaskText}\n        onChange={inputChange}\n        onKeyPress={addHandleEnter}\n        placeholder=\"Todo\"\n        style={{ width: '90%' }}\n      />\n      {/* {category !== null ? ( */}\n      <Select\n        onOpen={onOpen}\n        onClose={onClose}\n        onChange={handleChangeCategory}\n        value={category}\n      >\n        {categories.map(({ id, color, icon, name }) => (\n          <MenuItem key={id} value={id}>\n            <>\n              <Icon color={color} icon={icon} />\n              {open && name}\n            </>\n          </MenuItem>\n        ))}\n      </Select>\n      {/*  ) : null} */}\n      <Button\n        type=\"submit\"\n        disabled={newTaskText.length === 0 || newTaskText.length > 30}\n        variant=\"contained\"\n        color=\"primary\"\n        style={{ width: '10%' }}\n        onClick={() => {\n          newTaskText &&\n            newTaskText.length < 10 &&\n            dispatch(addTask(newTaskParams));\n        }}\n      >\n        Add\n      </Button>\n    </div>\n  );\n};\n\nexport default TaskInput;\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskListWrapper.jsx",["161","162","163"],"import React, { useEffect, useState } from 'react';\nimport { List } from '../components/TaskList';\nimport ListHook from '../hooks/ListHook';\nimport { useSelector } from 'react-redux';\nimport { getIsFetching } from '../redux/selectors/selectors';\nimport { useLocation } from 'react-router-dom';\nimport queryString from 'query-string';\nimport QueryParams from '../utils/QueryParams';\nimport { getTasks } from '../redux/actions';\nimport { useStyles } from './ListWrapper.styles';\nimport Filter from './Filter';\n\nexport const ListWrapper = ({\n  isListDone,\n  selectedDateFrom,\n  selectedDateTo,\n}) => {\n  const classes = useStyles();\n  const isFetching = useSelector(getIsFetching);\n  const locationPath = useLocation();\n  const parsed = queryString.parse(window.location.search);\n\n  const [dateSort, setDateSort] = useState(() => {\n    return parsed._sort === ('isFavorite,date' || 'isFavorite,date,title');\n  });\n\n  const [nameSort, setNameSort] = useState(() => {\n    return parsed._sort === ('isFavorite,date' || 'isFavorite,date,title');\n  });\n\n  const [categoryId, setCategoryId] = useState(() => {\n    return parsed.categoryId;\n  });\n\n  const { tasks, unDoneTasks, categories, history, endNumber, dispatch } =\n    ListHook();\n\n  const [end, setEnd] = useState(endNumber);\n\n  const dateFrom = selectedDateFrom\n    ? selectedDateFrom.valueOf() - 43150000\n    : 1577836800000;\n\n  const dateTo = selectedDateTo\n    ? selectedDateTo.valueOf() + 43150000\n    : 1640995200000;\n\n  const onDateSortChange = (e) => {\n    setDateSort(e.target.checked);\n  };\n\n  const onNameSortChange = (e) => {\n    setNameSort(e.target.checked);\n  };\n\n  useEffect(() => {\n    /* parsed.categoryId ? setCategoryId(parsed.categoryId) : null; */\n    switch (parsed._sort) {\n      case 'isFavorite,date': {\n        setDateSort(true);\n        QueryParams._sort[1] = 'date';\n        QueryParams._order[1] = 'asc';\n        break;\n      }\n      case 'isFavorite,title': {\n        setNameSort(true);\n        QueryParams._sort[2] = 'title';\n        QueryParams._order[2] = 'asc';\n        break;\n      }\n      case 'isFavorite,date,title': {\n        setDateSort(true);\n        QueryParams._sort[1] = 'date';\n        QueryParams._order[1] = 'asc';\n        setNameSort(true);\n        QueryParams._sort[2] = 'title';\n        QueryParams._order[2] = 'asc';\n        break;\n      }\n      default:\n        break;\n    }\n  }, []);\n\n  useEffect(() => {\n    QueryParams._sort[1] = dateSort ? 'date' : null;\n    QueryParams._sort[2] = nameSort ? 'title' : null;\n    QueryParams._order[1] = dateSort ? 'asc' : null;\n    QueryParams._order[2] = nameSort ? 'asc' : null;\n    QueryParams.categoryId = categoryId;\n\n    const searchString = queryString.stringify(QueryParams, {\n      skipNull: true,\n      arrayFormat: 'comma',\n    });\n\n    history.push({\n      pathname: locationPath.pathname,\n      search: searchString,\n    });\n\n    dispatch(getTasks({ isListDone, end, searchString, dateFrom, dateTo }));\n  }, [dateSort, nameSort, categoryId, end, dateFrom, dateTo]);\n  debugger;\n  return (\n    <div className={classes.AppCategoryChanger}>\n      <Filter\n        onDateSortChange={onDateSortChange}\n        onNameSortChange={onNameSortChange}\n        dateSort={dateSort}\n        nameSort={nameSort}\n        categoryId={categoryId}\n        setCategoryId={setCategoryId}\n      />\n      <List\n        tasks={!isListDone ? tasks : unDoneTasks}\n        isListDone={isListDone}\n        categories={categories}\n        end={end}\n        setEnd={setEnd}\n      />\n    </div>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoriesList.jsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoryCreator.jsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskList.jsx",["164","165","166","167","168","169"],"import React, { useEffect, useState } from 'react';\nimport { Grid } from '@material-ui/core';\nimport TaskItem from './TaskItem';\nimport FlipMove from 'react-flip-move';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nexport const List = ({ tasks, end, setEnd, categories, isListDone }) => {\n  const [sortTasks, setSortTasks] = useState(tasks);\n  const [tasksLength, setTasksLength] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n\n  useEffect(() => {\n    setSortTasks(\n      tasks\n        .filter((task) => task.isDone === isListDone)\n        .sort((a) => (a.isFavorite ? -1 : 1))\n    );\n  }, [tasks]);\n\n  /* useEffect(() => {\n    end <= tasks.length ? setHasMore(true) : setHasMore(false);\n    setTasksLength(tasks.length);\n  }, [tasks.length, end]); */\n\n  return (\n    <Grid container>\n      {/* <InfiniteScroll\n        dataLength={tasksLength}\n        next={() => setEnd(end + 4)}\n        hasMore={hasMore}\n        endMessage={\n          <p style={{ textAlign: 'center' }}>\n            <b>You have seen it all</b>\n          </p>\n        }\n      > */}\n      <FlipMove>\n        {sortTasks.map((task) => {\n          return (\n            <TaskItem\n              key={task.id}\n              task={task}\n              isListDone={isListDone}\n              categories={categories}\n            />\n          );\n        })}\n      </FlipMove>\n      {/* </InfiniteScroll> */}\n    </Grid>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.styles.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/QueryParams.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/ListWrapper.styles.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/colors.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/icons.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/hooks/ListHook.js",["170","171"],"import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getTasksFromState,\n  getCategoriesFromState,\n  getIsFetching,\n  getEndNumber,\n} from '../redux/selectors/selectors';\nimport { getDefaultCategory, getCategories } from '../redux/actions';\nimport { useHistory } from 'react-router-dom';\n\nconst ListHook = () => {\n  const history = useHistory();\n\n  const dispatch = useDispatch();\n  const tasks = useSelector(getTasksFromState);\n  const unDoneTasks = useSelector(getTasksFromState);\n  const categories = useSelector(getCategoriesFromState);\n  const isFetching = useSelector(getIsFetching);\n  const endNumber = useSelector(getEndNumber);\n\n  useEffect(() => {\n    // dispatch(getCategories());\n    // dispatch(getDefaultCategory());\n  }, []);\n\n  return {\n    tasks,\n    unDoneTasks,\n    categories,\n    isFetching,\n    dispatch,\n    endNumber,\n    history,\n  };\n};\n\nexport default ListHook;\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/Filter.jsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskItem.jsx",["172","173"],"import React from 'react';\nimport { Grid, Paper, TextField } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Delete } from '@material-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions, deleteTask, updateTask } from '../redux/actions';\nimport { getChangedTaskText } from '../redux/selectors/selectors';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { StyledButton } from './TaskButton';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport { useStyles } from './TaskItem.styles';\n\nconst styles = {\n  Icon: {\n    marginLeft: 'auto',\n  },\n  Paper: {\n    margin: 'auto',\n    padding: 10,\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: 10,\n    width: 500,\n  },\n};\n\nconst TaskItem = ({ task, categories, isListDone }) => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const changedTaskText = useSelector(getChangedTaskText);\n\n  const updateTextParams = {\n    title: changedTaskText,\n    id: task.id,\n  };\n\n  const editHandleEnter = (event) => {\n    if (event.key === 'Enter') {\n      dispatch(\n        updateTask({\n          isFavorite: task.isFavorite,\n          id: task.id,\n          isDone: task.isDone,\n          title: changedTaskText,\n          isListDone: isListDone,\n        })\n      );\n      dispatch(actions.editTaskText(updateTextParams));\n    }\n  };\n\n  const updateTaskFavorite = () => {\n    dispatch(\n      updateTask({\n        isFavorite: !task.isFavorite,\n        id: task.id,\n        isDone: task.isDone,\n        title: task.title,\n        isListDone: isListDone,\n      })\n    );\n    dispatch(actions.changeFavoriteStatus(task.id));\n  };\n\n  const inputTextChanger = (event) => {\n    const { value } = event.target;\n    const text = value;\n    dispatch(actions.updateEditTaskText(text));\n  };\n\n  const updateCategoryHandler = () => {\n    dispatch(\n      updateTask({\n        isFavorite: task.isFavorite,\n        title: task.title,\n        isDone: !task.isDone,\n        id: task.id,\n        isListDone: isListDone,\n      })\n    );\n    dispatch(actions.changeTaskStatus(task.id, isListDone));\n  };\n\n  const changeTaskHandler = () => {\n    dispatch(actions.changeHandler(task.id));\n  };\n\n  const deleteChosenTask = () => dispatch(deleteTask(task.id));\n\n  const enterHandler = (event) =>\n    changedTaskText.length > 0 ? editHandleEnter(event) : null;\n  debugger;\n  return (\n    <Grid item xs={12}>\n      <Paper elevation={2} style={styles.Paper}>\n        <div style={{ padding: '9px' }}>{`${new Date(\n          task.date\n        ).toLocaleDateString()}`}</div>\n        <Checkbox onClick={updateCategoryHandler} checked={task.isDone} />\n        <div style={{ padding: '10px' }}>\n          {categories.map((category) => {\n            if (category.id === task.categoryID) {\n              return (\n                <span\n                  key={task.categoryID}\n                  className=\"material-icons\"\n                  style={{\n                    color: category.color,\n                    verticalAlign: 'middle',\n                    margin: 5,\n                  }}\n                >\n                  {category.icon}\n                </span>\n              );\n            }\n          })}\n        </div>\n\n        {task.isEdit ? (\n          <TextField\n            value={changedTaskText}\n            onChange={inputTextChanger}\n            key={task.id + 1}\n            onKeyPress={enterHandler}\n          />\n        ) : (\n          //(<span>{task.title}</span>)\n          <span onClick={changeTaskHandler}>{task.title}</span>\n        )}\n        <StyledButton className=\"material-icons\" onClick={updateTaskFavorite}>\n          {task.isFavorite ? <StarIcon /> : <StarBorderIcon />}\n        </StyledButton>\n\n        <IconButton\n          color=\"secondary\"\n          aria-label=\"Delete\"\n          onClick={deleteChosenTask}\n        >\n          <Delete fontSize=\"small\" />\n        </IconButton>\n      </Paper>\n    </Grid>\n  );\n};\n\nexport default TaskItem;\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/Category.jsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskItem.styles.js",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Categories.styles.js",["174","175"],"import { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nconst theme = createMuiTheme({\n  breakpoints: {\n    values: {\n      xs: 340,\n      sm: 650,\n      md: 960,\n      lg: 1280,\n      xl: 1920,\n    },\n  },\n});\n\nexport const useStyles = makeStyles({\n  CategoryPageContainer: {\n    minHeight: '48px',\n    minWidth: '200px',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    flexDirection: 'column',\n    [theme.breakpoints.up('xs')]: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n  },\n  CategoryParams: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '300px',\n  },\n  CategoryTitle: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  categoryTitleWithEdit: {\n    display: 'flex',\n    justifyContent: 'center',\n    '&:hover': {\n      cursor: 'pointer',\n      textDecoration: 'underline',\n    },\n  },\n  CategoryParamsName: {\n    marginLeft: '10px',\n  },\n  CategoryPageRow: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n});\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskButton.jsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Icon.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/api/api.ts",["176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199"],{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":8,"column":10,"nodeType":"206","messageId":"207","endLine":8,"endColumn":14},{"ruleId":"204","severity":1,"message":"208","line":26,"column":10,"nodeType":"206","messageId":"207","endLine":26,"endColumn":18},{"ruleId":"204","severity":1,"message":"209","line":26,"column":20,"nodeType":"206","messageId":"207","endLine":26,"endColumn":31},{"ruleId":"204","severity":1,"message":"205","line":6,"column":10,"nodeType":"206","messageId":"207","endLine":6,"endColumn":14},{"ruleId":"210","severity":1,"message":"211","line":36,"column":6,"nodeType":"212","endLine":36,"endColumn":8,"suggestions":"213"},{"ruleId":"204","severity":1,"message":"209","line":24,"column":20,"nodeType":"206","messageId":"207","endLine":24,"endColumn":31},{"ruleId":"210","severity":1,"message":"214","line":29,"column":6,"nodeType":"212","endLine":29,"endColumn":8,"suggestions":"215"},{"ruleId":"204","severity":1,"message":"216","line":19,"column":9,"nodeType":"206","messageId":"207","endLine":19,"endColumn":19},{"ruleId":"210","severity":1,"message":"217","line":83,"column":6,"nodeType":"212","endLine":83,"endColumn":8,"suggestions":"218"},{"ruleId":"210","severity":1,"message":"219","line":103,"column":6,"nodeType":"212","endLine":103,"endColumn":61,"suggestions":"220"},{"ruleId":"204","severity":1,"message":"221","line":5,"column":8,"nodeType":"206","messageId":"207","endLine":5,"endColumn":22},{"ruleId":"204","severity":1,"message":"222","line":9,"column":10,"nodeType":"206","messageId":"207","endLine":9,"endColumn":21},{"ruleId":"204","severity":1,"message":"223","line":9,"column":23,"nodeType":"206","messageId":"207","endLine":9,"endColumn":37},{"ruleId":"204","severity":1,"message":"224","line":10,"column":10,"nodeType":"206","messageId":"207","endLine":10,"endColumn":17},{"ruleId":"204","severity":1,"message":"225","line":10,"column":19,"nodeType":"206","messageId":"207","endLine":10,"endColumn":29},{"ruleId":"210","severity":1,"message":"226","line":18,"column":6,"nodeType":"212","endLine":18,"endColumn":13,"suggestions":"227"},{"ruleId":"204","severity":1,"message":"228","line":9,"column":10,"nodeType":"206","messageId":"207","endLine":9,"endColumn":28},{"ruleId":"204","severity":1,"message":"229","line":9,"column":30,"nodeType":"206","messageId":"207","endLine":9,"endColumn":43},{"ruleId":"204","severity":1,"message":"230","line":30,"column":9,"nodeType":"206","messageId":"207","endLine":30,"endColumn":16},{"ruleId":"231","severity":1,"message":"232","line":103,"column":38,"nodeType":"233","messageId":"234","endLine":103,"endColumn":40},{"ruleId":"204","severity":1,"message":"235","line":1,"column":22,"nodeType":"206","messageId":"207","endLine":1,"endColumn":32},{"ruleId":"204","severity":1,"message":"236","line":2,"column":8,"nodeType":"206","messageId":"207","endLine":2,"endColumn":14},{"ruleId":"237","severity":2,"message":"238","line":1,"column":19,"nodeType":null,"messageId":"239","endLine":1,"endColumn":26,"fix":"240"},{"ruleId":"241","severity":2,"message":"242","line":1,"column":19,"nodeType":"243","messageId":"244","endLine":1,"endColumn":26,"fix":"245"},{"ruleId":"237","severity":2,"message":"246","line":5,"column":12,"nodeType":null,"messageId":"239","endLine":5,"endColumn":36,"fix":"247"},{"ruleId":"241","severity":2,"message":"242","line":5,"column":12,"nodeType":"243","messageId":"244","endLine":5,"endColumn":36,"fix":"248"},{"ruleId":"237","severity":2,"message":"249","line":10,"column":22,"nodeType":null,"messageId":"239","endLine":10,"endColumn":61,"fix":"250"},{"ruleId":"241","severity":2,"message":"242","line":10,"column":22,"nodeType":"243","messageId":"244","endLine":10,"endColumn":35,"fix":"251"},{"ruleId":"241","severity":2,"message":"242","line":10,"column":38,"nodeType":"243","messageId":"244","endLine":10,"endColumn":46,"fix":"252"},{"ruleId":"241","severity":2,"message":"242","line":10,"column":49,"nodeType":"243","messageId":"244","endLine":10,"endColumn":56,"fix":"253"},{"ruleId":"241","severity":2,"message":"242","line":10,"column":59,"nodeType":"243","messageId":"244","endLine":10,"endColumn":61,"fix":"254"},{"ruleId":"241","severity":2,"message":"242","line":11,"column":21,"nodeType":"243","messageId":"244","endLine":11,"endColumn":30,"fix":"255"},{"ruleId":"237","severity":2,"message":"256","line":11,"column":21,"nodeType":null,"messageId":"239","endLine":11,"endColumn":57,"fix":"257"},{"ruleId":"241","severity":2,"message":"242","line":11,"column":33,"nodeType":"243","messageId":"244","endLine":11,"endColumn":39,"fix":"258"},{"ruleId":"241","severity":2,"message":"242","line":11,"column":42,"nodeType":"243","messageId":"244","endLine":11,"endColumn":52,"fix":"259"},{"ruleId":"241","severity":2,"message":"242","line":11,"column":55,"nodeType":"243","messageId":"244","endLine":11,"endColumn":57,"fix":"260"},{"ruleId":"237","severity":2,"message":"261","line":26,"column":45,"nodeType":null,"messageId":"239","endLine":26,"endColumn":54,"fix":"262"},{"ruleId":"241","severity":2,"message":"242","line":26,"column":45,"nodeType":"243","messageId":"244","endLine":26,"endColumn":54,"fix":"263"},{"ruleId":"237","severity":2,"message":"264","line":43,"column":18,"nodeType":null,"messageId":"239","endLine":43,"endColumn":31,"fix":"265"},{"ruleId":"241","severity":2,"message":"242","line":43,"column":18,"nodeType":"243","messageId":"244","endLine":43,"endColumn":31,"fix":"266"},{"ruleId":"237","severity":2,"message":"267","line":46,"column":18,"nodeType":null,"messageId":"239","endLine":46,"endColumn":36,"fix":"268"},{"ruleId":"241","severity":2,"message":"242","line":46,"column":18,"nodeType":"243","messageId":"244","endLine":46,"endColumn":36,"fix":"269"},{"ruleId":"237","severity":2,"message":"267","line":55,"column":18,"nodeType":null,"messageId":"239","endLine":55,"endColumn":36,"fix":"270"},{"ruleId":"241","severity":2,"message":"242","line":55,"column":18,"nodeType":"243","messageId":"244","endLine":55,"endColumn":36,"fix":"271"},{"ruleId":"237","severity":2,"message":"264","line":59,"column":19,"nodeType":null,"messageId":"239","endLine":59,"endColumn":32,"fix":"272"},{"ruleId":"241","severity":2,"message":"242","line":59,"column":19,"nodeType":"243","messageId":"244","endLine":59,"endColumn":32,"fix":"273"},"no-native-reassign",["274"],"no-negated-in-lhs",["275"],"no-unused-vars","'List' is defined but never used.","Identifier","unusedVar","'taskDate' is assigned a value but never used.","'setTaskDate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["276"],"React Hook useEffect has a missing dependency: 'categoryID'. Either include it or remove the dependency array.",["277"],"'isFetching' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'parsed._sort'. Either include it or remove the dependency array.",["278"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'isListDone', and 'locationPath.pathname'. Either include them or remove the dependency array.",["279"],"'InfiniteScroll' is defined but never used.","'tasksLength' is assigned a value but never used.","'setTasksLength' is assigned a value but never used.","'hasMore' is assigned a value but never used.","'setHasMore' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'isListDone'. Either include it or remove the dependency array. If 'setSortTasks' needs the current value of 'isListDone', you can also switch to useReducer instead of useState and read 'isListDone' in the reducer.",["280"],"'getDefaultCategory' is defined but never used.","'getCategories' is defined but never used.","'classes' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'withStyles' is defined but never used.","'Button' is defined but never used.","prettier/prettier","Replace `\"axios\"` with `'axios'`","replace",{"range":"281","text":"282"},"quotes","Strings must use singlequote.","Literal","wrongQuotes",{"range":"283","text":"282"},"Replace `\"http://localhost:3000/\"` with `'http://localhost:3000/'`",{"range":"284","text":"285"},{"range":"286","text":"285"},"Replace `\"yellowgreen\"·|·\"yellow\"·|·\"black\"·|·\"\"` with `'yellowgreen'·|·'yellow'·|·'black'·|·''`",{"range":"287","text":"288"},{"range":"289","text":"290"},{"range":"291","text":"292"},{"range":"293","text":"294"},{"range":"295","text":"296"},{"range":"297","text":"298"},"Replace `\"acnchor\"·|·\"home\"·|·\"thumb_up\"·|·\"\"` with `'acnchor'·|·'home'·|·'thumb_up'·|·''`",{"range":"299","text":"300"},{"range":"301","text":"302"},{"range":"303","text":"304"},{"range":"305","text":"296"},"Replace `\"/tasks/\"` with `'/tasks/'`",{"range":"306","text":"307"},{"range":"308","text":"307"},"Replace `\"/categories\"` with `'/categories'`",{"range":"309","text":"310"},{"range":"311","text":"310"},"Replace `\"/defaultCategory\"` with `'/defaultCategory'`",{"range":"312","text":"313"},{"range":"314","text":"313"},{"range":"315","text":"313"},{"range":"316","text":"313"},{"range":"317","text":"310"},{"range":"318","text":"310"},"no-global-assign","no-unsafe-negation",{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},[18,25],"'axios'",[18,25],[96,120],"'http://localhost:3000/'",[96,120],[204,243],"'yellowgreen' | 'yellow' | 'black' | ''",[204,217],"'yellowgreen'",[220,228],"'yellow'",[231,238],"'black'",[241,243],"''",[265,274],"'acnchor'",[265,301],"'acnchor' | 'home' | 'thumb_up' | ''",[277,283],"'home'",[286,296],"'thumb_up'",[299,301],[703,712],"'/tasks/'",[703,712],[1166,1179],"'/categories'",[1166,1179],[1262,1280],"'/defaultCategory'",[1262,1280],[1547,1565],[1547,1565],[1638,1651],[1638,1651],"Update the dependencies array to be: [dispatch]",{"range":"329","text":"330"},"Update the dependencies array to be: [categoryID]",{"range":"331","text":"332"},"Update the dependencies array to be: [parsed._sort]",{"range":"333","text":"334"},"Update the dependencies array to be: [dateSort, nameSort, categoryId, end, dateFrom, dateTo, history, locationPath.pathname, dispatch, isListDone]",{"range":"335","text":"336"},"Update the dependencies array to be: [isListDone, tasks]",{"range":"337","text":"338"},[1259,1261],"[dispatch]",[1027,1029],"[categoryID]",[2382,2384],"[parsed._sort]",[2961,3016],"[dateSort, nameSort, categoryId, end, dateFrom, dateTo, history, locationPath.pathname, dispatch, isListDone]",[623,630],"[isListDone, tasks]"]