[{"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskItem.tsx":"1","/home/alexandr/ToDoList/alexandr-testwork/src/api/api.ts":"2","/home/alexandr/ToDoList/alexandr-testwork/src/components/Icon.tsx":"3","/home/alexandr/ToDoList/alexandr-testwork/src/utils/icons.ts":"4","/home/alexandr/ToDoList/alexandr-testwork/src/utils/colors.ts":"5","/home/alexandr/ToDoList/alexandr-testwork/src/redux/store.ts":"6","/home/alexandr/ToDoList/alexandr-testwork/src/redux/reducers/reducer.ts":"7","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.tsx":"8","/home/alexandr/ToDoList/alexandr-testwork/src/redux/actions.ts":"9","/home/alexandr/ToDoList/alexandr-testwork/src/redux/selectors/selectors.ts":"10","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskListWrapper.tsx":"11","/home/alexandr/ToDoList/alexandr-testwork/src/utils/QueryParams.ts":"12","/home/alexandr/ToDoList/alexandr-testwork/src/index.tsx":"13","/home/alexandr/ToDoList/alexandr-testwork/src/App.tsx":"14","/home/alexandr/ToDoList/alexandr-testwork/src/utils/routes.ts":"15","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskList.tsx":"16","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.tsx":"17","/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.tsx":"18","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.styles.ts":"19","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.styles.ts":"20","/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.styles.ts":"21","/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoriesList.tsx":"22","/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoryCreator.tsx":"23","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.tsx":"24","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.styles.ts":"25","/home/alexandr/ToDoList/alexandr-testwork/src/components/Category.tsx":"26","/home/alexandr/ToDoList/alexandr-testwork/src/components/Categories.styles.ts":"27","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskListWrapper.styles.ts":"28","/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.styles.ts":"29","/home/alexandr/ToDoList/alexandr-testwork/src/components/Filter.tsx":"30","/home/alexandr/ToDoList/alexandr-testwork/src/hooks/ListHook.tsx":"31","/home/alexandr/ToDoList/alexandr-testwork/src/components/Preloader/Preloader.tsx":"32","/home/alexandr/ToDoList/alexandr-testwork/src/components/Preloader/Preloader.styles.ts":"33","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskButton.ts":"34","/home/alexandr/ToDoList/alexandr-testwork/src/utils/navTabs.ts":"35","/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.tsx":"36","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskList.styles.ts":"37","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskItem.styles.ts":"38","/home/alexandr/ToDoList/alexandr-testwork/src/utils/validators/validators.ts":"39"},{"size":4869,"mtime":1623059307824,"results":"40","hashOfConfig":"41"},{"size":2255,"mtime":1623055707158,"results":"42","hashOfConfig":"41"},{"size":506,"mtime":1622197963596,"results":"43","hashOfConfig":"41"},{"size":121,"mtime":1622198358965,"results":"44","hashOfConfig":"41"},{"size":123,"mtime":1622197164279,"results":"45","hashOfConfig":"41"},{"size":750,"mtime":1622625475667,"results":"46","hashOfConfig":"41"},{"size":5559,"mtime":1622448352557,"results":"47","hashOfConfig":"41"},{"size":3298,"mtime":1622454385408,"results":"48","hashOfConfig":"41"},{"size":4721,"mtime":1622627845824,"results":"49","hashOfConfig":"41"},{"size":837,"mtime":1622725928989,"results":"50","hashOfConfig":"41"},{"size":3846,"mtime":1623054588874,"results":"51","hashOfConfig":"41"},{"size":304,"mtime":1622445745485,"results":"52","hashOfConfig":"41"},{"size":296,"mtime":1622448379855,"results":"53","hashOfConfig":"41"},{"size":452,"mtime":1622448391587,"results":"54","hashOfConfig":"41"},{"size":504,"mtime":1622448584083,"results":"55","hashOfConfig":"41"},{"size":1998,"mtime":1622720057168,"results":"56","hashOfConfig":"41"},{"size":2978,"mtime":1623058536317,"results":"57","hashOfConfig":"41"},{"size":2078,"mtime":1623058210033,"results":"58","hashOfConfig":"41"},{"size":1315,"mtime":1622454324798,"results":"59","hashOfConfig":"41"},{"size":588,"mtime":1622640854764,"results":"60","hashOfConfig":"41"},{"size":337,"mtime":1622458051648,"results":"61","hashOfConfig":"41"},{"size":928,"mtime":1622455836468,"results":"62","hashOfConfig":"41"},{"size":4812,"mtime":1623050727390,"results":"63","hashOfConfig":"41"},{"size":3129,"mtime":1623056291801,"results":"64","hashOfConfig":"41"},{"size":146,"mtime":1622452895273,"results":"65","hashOfConfig":"41"},{"size":3809,"mtime":1623054502745,"results":"66","hashOfConfig":"41"},{"size":1137,"mtime":1622454420023,"results":"67","hashOfConfig":"41"},{"size":321,"mtime":1622458387461,"results":"68","hashOfConfig":"41"},{"size":419,"mtime":1622459445148,"results":"69","hashOfConfig":"41"},{"size":2718,"mtime":1622642144576,"results":"70","hashOfConfig":"41"},{"size":961,"mtime":1622725963493,"results":"71","hashOfConfig":"41"},{"size":346,"mtime":1622643821189,"results":"72","hashOfConfig":"41"},{"size":242,"mtime":1622465930572,"results":"73","hashOfConfig":"41"},{"size":272,"mtime":1623059177943,"results":"74","hashOfConfig":"41"},{"size":259,"mtime":1622538070576,"results":"75","hashOfConfig":"41"},{"size":517,"mtime":1622538818311,"results":"76","hashOfConfig":"41"},{"size":143,"mtime":1622720315771,"results":"77","hashOfConfig":"41"},{"size":871,"mtime":1623059304564,"results":"78","hashOfConfig":"41"},{"size":194,"mtime":1622535476905,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"jepx49",{"filePath":"82","messages":"83","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"85"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"85"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"85"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"85"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"85"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"85"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"85"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"85"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"85"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"85"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"85"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"85"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskItem.tsx",["172"],"/home/alexandr/ToDoList/alexandr-testwork/src/api/api.ts",["173","174","175","176","177","178","179","180","181","182","183"],"import axios from 'axios';\nimport { TaskType } from '../components/TaskItem';\nimport {\n  CategoryDataType,\n  CategoryType,\n  NewCategoryParamsType,\n  newTaskParamsType,\n  ParamsType,\n  updateCategoryParamsType,\n  UpdateCategoryParamsType,\n  UpdateTaskType,\n} from '../types/types';\n\nconst instance = axios.create({\n  withCredentials: true,\n  baseURL: 'http://localhost:3000/' /* `${process.env.REACT_APP_URL}` */,\n});\n\nconst limit = 50;\n\nexport type Colors = 'yellowgreen' | 'yellow' | 'black' | '';\nexport type Icons = 'pets' | 'home' | 'nightlight_round' | '';\n\nexport const API = {\n  getTasks: (Params: ParamsType) =>\n    instance\n      .get<Array<TaskType>>(\n        `tasks?date_gte=${Params.dateFrom}&date_lte=${Params.dateTo}&${Params.searchString}&isDone=${Params.isListDone}&_start=0&_end=${Params.end}&_limit=${limit}`\n      )\n      .then((response) => response.data),\n\n  deleteTask(id: number) {\n    instance.delete(`/tasks/${id}`);\n  },\n\n  addTask: (newTaskParams: newTaskParamsType) =>\n    instance.post<TaskType>('/tasks/', newTaskParams),\n\n  updateTask: (updateTaskParams: UpdateTaskType) => {\n    instance.patch<CategoryType>(`/tasks/${updateTaskParams.id}`, {\n      title: updateTaskParams.title,\n      isDone: updateTaskParams.isDone,\n      isFavorite: updateTaskParams.isFavorite,\n    });\n  },\n\n  updateCategoryText: (updateCategoryParams: updateCategoryParamsType) => {\n    instance.patch<CategoryType>(`/categories/${updateCategoryParams.id}`, {\n      name: updateCategoryParams.name,\n    });\n  },\n\n  getCategories: () =>\n    instance\n      .get<Array<CategoryType>>('/categories')\n      .then((response) => response.data),\n\n  getDefaultCategory: () =>\n    instance\n      .get<CategoryDataType>('/defaultCategory')\n      .then((response) => response.data.id),\n\n  deleteCategory: (id: number) => instance.delete(`/categories/${id}`),\n\n  updateCategory: ({ id, icon, color }: UpdateCategoryParamsType) => {\n    instance.patch<CategoryType>(`/categories/${id}`, { icon, color });\n  },\n\n  updateDefaultCategory: (id: number | undefined) => {\n    instance.put<CategoryType>('/defaultCategory', { id });\n  },\n\n  addCategory: (newCategoryParams: NewCategoryParamsType) =>\n    instance.post<CategoryType>('/categories', newCategoryParams),\n};\n",["184","185"],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Icon.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/icons.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/colors.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/redux/store.ts",["186"],"import { createStore, applyMiddleware, Action } from 'redux';\nimport { reducer } from './reducers/reducer';\nimport thunkMiddleWare, { ThunkAction } from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\ntype RootReducerType = typeof reducer;\nexport type AppStateType = ReturnType<RootReducerType>;\n\nexport type InferActionsTypes<T> = T extends {\n  [keys: string]: (...args: any[]) => infer U;\n}\n  ? U\n  : never;\n\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> =\n  ThunkAction<R, AppStateType, unknown, A>;\n\n/* export const store = createStore(reducer, applyMiddleware(thunkMiddleWare)); */\n\nexport const store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunkMiddleWare))\n);\n","/home/alexandr/ToDoList/alexandr-testwork/src/redux/reducers/reducer.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.tsx",["187"],"import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Select } from '@material-ui/core';\nimport { Icon } from '../components/Icon';\nimport { CategoriesList } from '../components/CategoriesList';\nimport { CategoryCreator } from '../components/CategoryCreator';\nimport {\n  getCategoriesFromState,\n  selectDefaultCategoryId,\n} from '../redux/selectors/selectors';\nimport {\n  actions,\n  getCategories,\n  getDefaultCategory,\n  updateDefaultCategory,\n} from '../redux/actions';\nimport useStyles from './Settings.styles';\nimport { Colors, Icons } from '../api/api';\n\nexport const Settings: React.FC = () => {\n  const classes = useStyles();\n  const categories = useSelector(getCategoriesFromState);\n  const categoryId = useSelector(selectDefaultCategoryId);\n  const [category, setCategory] = useState<number | null>(categoryId);\n  const [opened, setOpened] = useState<boolean>(false);\n  const [edit, setEdit] = useState(false);\n  const [editCategoryId, setEditCategoryId] = useState<number | null>(null);\n  const [button, setButton] = useState<Colors>('black');\n  const [choosesIcon, setChoosesIcon] = useState<Icons>('home');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCategories());\n    dispatch(getDefaultCategory());\n  }, []);\n\n  useEffect(() => {\n    setCategory(categoryId);\n  }, [categoryId]);\n\n  const onOpen = () => {\n    setOpened(true);\n  };\n  const onClose = () => {\n    setOpened(false);\n  };\n\n  const handleChangeCategory = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    dispatch(actions.setCategory(event.target.value as number));\n    dispatch(updateDefaultCategory(event.target.value as number));\n  };\n\n  return (\n    <div>\n      <h1 className={classes.SettingsMainTitle}>Settings</h1>\n      <div className={classes.SettingsPageContainer}>\n        <div>\n          <h2>{edit ? 'Edit Icon' : 'Categories Maker'}</h2>\n          <CategoryCreator\n            edit={edit}\n            editCategoryId={editCategoryId}\n            setEditCategoryId={setEditCategoryId}\n            setEdit={setEdit}\n            setButton={setButton}\n            setChoosesIcon={setChoosesIcon}\n            button={button}\n            choosesIcon={choosesIcon}\n          />\n        </div>\n        <div className={classes.SettingsPageCategories}>\n          <div>\n            <h2>Categories</h2>\n          </div>\n          <CategoriesList\n            categories={categories}\n            setEdit={setEdit}\n            setEditCategoryId={setEditCategoryId}\n            editCategoryId={editCategoryId}\n            setButton={setButton}\n            setChoosesIcon={setChoosesIcon}\n          />\n          <h4>Default category: </h4>\n\n          <Select\n            onOpen={onOpen}\n            onClose={onClose}\n            onChange={handleChangeCategory}\n            value={category}\n          >\n            {categories.map(({ id, color, icon, name }) => (\n              <MenuItem key={id} value={id}>\n                <>\n                  <Icon color={color} icon={icon} />\n                  {opened && name}\n                </>\n              </MenuItem>\n            ))}\n          </Select>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/redux/actions.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/redux/selectors/selectors.ts",["188","189","190","191","192","193","194","195","196","197"],"import { AppStateType } from '../store';\n\nexport const getTasksFromState = (state: AppStateType) => state.unDoneTasks;\nexport const getDoneTasksFromState = (state: AppStateType) => state.doneTasks;\n\nexport const getNewTaskText = (state: AppStateType) => state.newTaskText;\n\nexport const getChangedTaskText = (state: AppStateType) =>\n  state.changedTaskText;\nexport const getChangedCategoryText = (state: AppStateType) =>\n  state.changedCategoryText;\nexport const getCategoriesFromState = (state: AppStateType) => state.categories;\nexport const getIsFetching = (state: AppStateType) => state.isFetching;\nexport const selectDefaultCategoryId = (state: AppStateType) =>\n  state.categoryId;\nexport const getCategoriesName = (state: AppStateType) => state.categoriesName;\nexport const getEndNumber = (state: AppStateType) => state.endNumber;\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskListWrapper.tsx",["198","199"],"import React, { useEffect, useState } from 'react';\nimport { TaskList } from './TaskList';\nimport ListHook from '../hooks/ListHook';\nimport { useSelector } from 'react-redux';\nimport { getIsFetching } from '../redux/selectors/selectors';\nimport { useLocation } from 'react-router-dom';\nimport queryString from 'query-string';\nimport QueryParams from '../utils/QueryParams';\nimport { getTasks } from '../redux/actions';\nimport { useStyles } from './TaskListWrapper.styles';\nimport Filter from './Filter';\nimport Preloader from './Preloader/Preloader';\nimport { DateType } from '@date-io/type';\n\ntype ListWrapperType = {\n  isListDone: boolean;\n  selectedDateFrom: DateType | null;\n  selectedDateTo: DateType | null;\n};\n\nexport const ListWrapper: React.FC<ListWrapperType> = ({\n  isListDone,\n  selectedDateFrom,\n  selectedDateTo,\n}) => {\n  const classes = useStyles();\n  const isFetching = useSelector(getIsFetching);\n  const locationPath = useLocation();\n  const parsed = queryString.parse(window.location.search);\n  const [categoryId, setCategoryId] = useState<string | string[] | null>(() => {\n    return parsed.categoryId;\n  });\n\n  const [dateSort, setDateSort] = useState<boolean>(() => {\n    return parsed._sort === ('isFavorite,date' || 'isFavorite,date,title');\n  });\n  const [nameSort, setNameSort] = useState<boolean>(() => {\n    return parsed._sort === ('isFavorite,title' || 'isFavorite,date,title');\n  });\n\n  const { categories, tasks, history, endNumber, unDoneTasks, dispatch } =\n    ListHook();\n\n  const [end, setEnd] = useState<number>(endNumber);\n\n  const dateFrom = selectedDateFrom\n    ? selectedDateFrom.valueOf() - 43150000\n    : 1577836800000;\n  const dateTo = selectedDateTo\n    ? selectedDateTo.valueOf() + 43150000\n    : 1640995200000;\n\n  const onDateSortChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDateSort(e.target.checked);\n  };\n  const onNameSortChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNameSort(e.target.checked);\n  };\n\n  useEffect(() => {\n    switch (parsed._sort) {\n      case 'isFavorite,date': {\n        setDateSort(true);\n        QueryParams._sort[1] = 'date';\n        QueryParams._order[1] = 'asc';\n        break;\n      }\n      case 'isFavorite,title': {\n        setNameSort(true);\n        QueryParams._sort[2] = 'title';\n        QueryParams._order[2] = 'asc';\n        break;\n      }\n      case 'isFavorite,date,title': {\n        setDateSort(true);\n        QueryParams._sort[1] = 'date';\n        QueryParams._order[1] = 'asc';\n        setNameSort(true);\n        QueryParams._sort[2] = 'title';\n        QueryParams._order[2] = 'asc';\n        break;\n      }\n      default:\n        break;\n    }\n  }, []);\n\n  useEffect(() => {\n    QueryParams._sort[1] = dateSort ? 'date' : null;\n    QueryParams._sort[2] = nameSort ? 'title' : null;\n    QueryParams._order[1] = dateSort ? 'asc' : null;\n    QueryParams._order[2] = nameSort ? 'asc' : null;\n    QueryParams.categoryId = categoryId;\n\n    const searchString = queryString.stringify(QueryParams, {\n      skipNull: true,\n      arrayFormat: 'comma',\n    });\n\n    history.push({\n      pathname: locationPath.pathname,\n      search: searchString,\n    });\n\n    dispatch(getTasks({ isListDone, end, searchString, dateFrom, dateTo }));\n  }, [dateSort, nameSort, categoryId, end, dateFrom, dateTo]);\n  return (\n    <div className={classes.AppCategoryChanger}>\n      <Filter\n        onDateSortChange={onDateSortChange}\n        onNameSortChange={onNameSortChange}\n        dateSort={dateSort}\n        nameSort={nameSort}\n        categoryId={categoryId}\n        setCategoryId={setCategoryId}\n      />\n      {isFetching ? <Preloader /> : null}\n      <TaskList\n        tasks={!isListDone ? unDoneTasks : tasks}\n        end={end}\n        setEnd={setEnd}\n        categories={categories}\n        isListDone={isListDone}\n      />\n    </div>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/utils/QueryParams.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/index.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/App.tsx",["200"],"import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { AppNavbar } from './AppNavbar';\nimport { routes } from './utils/routes';\n\nconst App = () => (\n  <Router>\n    <AppNavbar />\n    <div>\n      <Switch>\n        {routes.map(({ path, Component }) => (\n          <Route key={path} exact path={path} component={Component} />\n        ))}\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","/home/alexandr/ToDoList/alexandr-testwork/src/utils/routes.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskList.tsx",["201","202"],"import React, { useEffect, useState } from 'react';\nimport { Grid } from '@material-ui/core';\nimport TaskItem, { TaskType } from './TaskItem';\nimport FlipMove from 'react-flip-move';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { CategoryType } from '../types/types';\nimport Preloader from './Preloader/Preloader';\nimport { useStyles } from './TaskList.styles';\n\ntype PropsType = {\n  tasks: Array<TaskType>;\n  end: number;\n  setEnd: (end: number) => void;\n  categories: CategoryType[];\n  isListDone: boolean;\n};\n\nexport const TaskList: React.FC<PropsType> = ({\n  tasks,\n  end,\n  setEnd,\n  categories,\n  isListDone,\n}) => {\n  const [hasMore, setHasMore] = useState<boolean>(true);\n  const [tasksLength, setTasksLength] = useState<number>(0);\n  const [sortTasks, setSortTasks] = useState<TaskType[]>(tasks);\n  const classes = useStyles();\n\n  useEffect(() => {\n    setSortTasks(\n      tasks\n        .filter((task) => task.isDone === isListDone)\n        .sort((a) => (a.isFavorite ? -1 : 1))\n    );\n  }, [tasks]);\n\n  useEffect(() => {\n    end <= tasks.length ? setHasMore(true) : setHasMore(false);\n    setTasksLength(tasks.length);\n  }, [tasks.length, end]);\n  return (\n    <>\n      <div className={classes.listScroll}>\n        <InfiniteScroll\n          dataLength={tasksLength}\n          next={() => setEnd(end + 4)}\n          hasMore={hasMore}\n          loader={<Preloader />}\n          endMessage={\n            <p style={{ textAlign: 'center' }}>\n              <b>You have seen it all</b>\n            </p>\n          }\n        >\n          <FlipMove>\n            {sortTasks.map((task) => {\n              return (\n                <TaskItem\n                  key={task.id}\n                  task={task}\n                  isListDone={isListDone}\n                  setEnd={setEnd}\n                  end={end}\n                  categories={categories}\n                />\n              );\n            })}\n          </FlipMove>\n        </InfiniteScroll>\n      </div>\n    </>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/Settings.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/Main.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/pages/CompletedTasks.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoriesList.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/CategoryCreator.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.tsx",["203"],"import React, { useEffect, useState } from 'react';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { addTask, actions } from '../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getCategoriesFromState,\n  getNewTaskText,\n  selectDefaultCategoryId,\n} from '../redux/selectors/selectors';\nimport { Select } from '@material-ui/core';\nimport { Icon } from './Icon';\nimport { useStyles } from './TaskInput.styles';\nimport { newTaskParamsType } from '../types/types';\n\nexport const TaskInput: React.FC = () => {\n  const classes = useStyles();\n\n  const newTaskText = useSelector(getNewTaskText);\n  const categories = useSelector(getCategoriesFromState);\n  const categoryId = useSelector(selectDefaultCategoryId);\n  const [open, setOpen] = useState<boolean>(false);\n  const [category, setCategory] = useState<number | null>(categoryId);\n  const [taskDate, setTaskDate] = useState(new Date(Date.now()));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setCategory(categoryId);\n  }, [categoryId]);\n\n  const onOpen = () => {\n    setOpen(true);\n  };\n\n  const onClose = () => {\n    setOpen(false);\n  };\n\n  const newTaskParams: newTaskParamsType = {\n    title: newTaskText,\n    isDone: false,\n    isEdit: false,\n    categoryId: categoryId,\n    isFavorite: false,\n    date: taskDate.valueOf(),\n  };\n\n  const addHandleEnter = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if (newTaskText && newTaskText.length < 30 && event.key === 'Enter') {\n      dispatch(addTask(newTaskParams));\n    }\n  };\n\n  const inputChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    const { value } = event.target;\n    const text = value;\n    dispatch(actions.updateNewMessageText(text));\n  };\n\n  const handleChangeCategory = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    dispatch(actions.setCategory(event.target.value as number));\n  };\n  return (\n    <div className={classes.todoForm}>\n      <Input\n        value={newTaskText}\n        onChange={inputChange}\n        onKeyPress={addHandleEnter}\n        placeholder=\"Todo\"\n        style={{ width: '90%' }}\n      />\n      {category !== null ? (\n        <Select\n          onOpen={onOpen}\n          onClose={onClose}\n          onChange={handleChangeCategory}\n          value={category}\n        >\n          {categories.map(({ id, color, icon, name }) => (\n            <MenuItem key={id} value={id}>\n              <>\n                <Icon color={color} icon={icon} />\n                {open && name}\n              </>\n            </MenuItem>\n          ))}\n        </Select>\n      ) : null}\n      <Button\n        type=\"submit\"\n        disabled={newTaskText.length === 0 || newTaskText.length > 30}\n        variant=\"contained\"\n        color=\"primary\"\n        style={{ width: '10%' }}\n        onClick={() => {\n          newTaskText &&\n            newTaskText.length < 10 &&\n            dispatch(addTask(newTaskParams));\n        }}\n      >\n        Add\n      </Button>\n    </div>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskInput.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Category.tsx",["204"],"import { makeStyles } from '@material-ui/core';\nimport Input from '@material-ui/core/Input';\nimport React, { ChangeEvent } from 'react';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useStyles } from './Categories.styles';\nimport { actions, deleteCategory, updateCategoryText } from '../redux/actions';\nimport {\n  getChangedCategoryText,\n  selectDefaultCategoryId,\n} from '../redux/selectors/selectors';\nimport { CategoryType, updateCategoryParamsType } from '../types/types';\nimport { Colors, Icons } from '../api/api';\nimport { maxLength } from './../utils/validators/validators';\n\nexport type CategoryPropsType = {\n  category: CategoryType;\n  setEdit: (edit: boolean) => void;\n  setEditCategoryId: (id: number) => void;\n  editCategoryId: number | null;\n  setButton: (button: Colors) => void;\n  setChoosesIcon: (Icons: Icons) => void;\n};\n\nexport const Category: React.FC<CategoryPropsType> = ({\n  category,\n  setEdit,\n  setEditCategoryId,\n  editCategoryId,\n  setButton,\n  setChoosesIcon,\n}) => {\n  const { color, icon, name, isEdit, id } = category;\n\n  const useStylesSpan = makeStyles({\n    CategoryIcon: {\n      color: color,\n    },\n  });\n\n  const iconClasses = useStylesSpan();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const categoryId = useSelector(selectDefaultCategoryId);\n  const changedCategoryText = useSelector(getChangedCategoryText);\n\n  const updateCategoryParams = {\n    name: changedCategoryText,\n    id,\n  };\n\n  const deleteChosenCategory = () => {\n    dispatch(deleteCategory(id));\n    setEditCategoryId(id);\n  };\n\n  const inputTextChanger = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    const { value } = event.target;\n    const text = value;\n    dispatch(actions.updateEditCategoryText(text));\n  };\n\n  const editHandleEnter = (\n    event: React.KeyboardEvent<HTMLDivElement>,\n    updateCategoryParams: updateCategoryParamsType\n  ) => {\n    if (event.key === 'Enter') {\n      dispatch(updateCategoryText(updateCategoryParams));\n    }\n  };\n\n  const enterHandler = (event: React.KeyboardEvent<HTMLDivElement>) =>\n    changedCategoryText.length > 0\n      ? editHandleEnter(event, updateCategoryParams)\n      : null;\n\n  const changeCategoryHandler = () => {\n    dispatch(actions.changeCategoryHandler(id));\n  };\n\n  return (\n    <div className={classes.CategoryPageContainer}>\n      <div className={classes.CategoryPageRow}>\n        <div className={classes.CategoryParams}>\n          <Button\n            onClick={() => {\n              setEdit(true);\n              setEditCategoryId(id);\n              setButton(color);\n              setChoosesIcon(icon);\n            }}\n          >\n            <span className={`${iconClasses.CategoryIcon} material-icons`}>\n              {icon}\n            </span>\n          </Button>\n          {isEdit ? (\n            <Input\n              value={changedCategoryText}\n              onChange={inputTextChanger}\n              onKeyPress={enterHandler}\n              /* error={maxLength(сhangedCategoryText)} */\n              placeholder=\"edit category\"\n            />\n          ) : (\n            <span\n              onClick={changeCategoryHandler}\n              className={classes.categoryTitleWithEdit}\n            >\n              {name}\n            </span>\n          )}\n        </div>\n        <div>\n          {categoryId !== id && (\n            <IconButton\n              aria-label=\"Delete\"\n              onClick={deleteChosenCategory}\n              disabled={editCategoryId === id}\n            >\n              <ClearIcon color={'secondary'} />\n            </IconButton>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/Categories.styles.ts",["205","206"],"import { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\n\nconst theme = createMuiTheme({\n  breakpoints: {\n    values: {\n      xs: 340,\n      sm: 650,\n      md: 960,\n      lg: 1280,\n      xl: 1920,\n    },\n  },\n});\n\nexport const useStyles = makeStyles({\n  CategoryPageContainer: {\n    minHeight: '48px',\n    minWidth: '200px',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    flexDirection: 'column',\n    [theme.breakpoints.up('xs')]: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n  },\n  CategoryParams: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '300px',\n  },\n  CategoryTitle: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  categoryTitleWithEdit: {\n    display: 'flex',\n    justifyContent: 'center',\n    '&:hover': {\n      cursor: 'pointer',\n      textDecoration: 'underline',\n    },\n  },\n  CategoryParamsName: {\n    marginLeft: '10px',\n  },\n  CategoryPageRow: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n});\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskListWrapper.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Filter.tsx",["207"],"import { MenuItem, Select } from '@material-ui/core';\nimport Switch from '@material-ui/core/Switch';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getCategoriesFromState } from '../redux/selectors/selectors';\nimport { Icon } from './Icon';\nimport { useStyles } from './TaskListWrapper.styles';\n\ntype SwitchesType = {\n  title: string;\n  checked: boolean;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\ntype FilterType = {\n  onNameSortChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onDateSortChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  nameSort: boolean;\n  dateSort: boolean;\n  categoryId: string | string[] | null;\n  setCategoryId: (categoryId: string | string[] | null) => void;\n};\n\nconst Filter: React.FC<FilterType> = ({\n  onNameSortChange,\n  onDateSortChange,\n  nameSort,\n  dateSort,\n  categoryId,\n  setCategoryId,\n}) => {\n  const [opened, setOpened] = useState(false);\n  const categories = useSelector(getCategoriesFromState);\n  const classes = useStyles();\n\n  const onOpen = () => {\n    setOpened(true);\n  };\n\n  const onClose = () => {\n    setOpened(false);\n  };\n\n  const handleChangeCategory = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    event.target.value !== 51\n      ? setCategoryId(`${event.target.value}`)\n      : setCategoryId(null);\n  };\n\n  const completedTasksSwitches: SwitchesType[] = [\n    {\n      title: 'Sort Task by date',\n      checked: dateSort,\n      onChange: onDateSortChange,\n    },\n    {\n      title: 'Sort Task by name',\n      checked: nameSort,\n      onChange: onNameSortChange,\n    },\n  ];\n\n  return (\n    <div>\n      <div className=\"AppCategory\">\n        <Select\n          onOpen={onOpen}\n          onClose={onClose}\n          onChange={handleChangeCategory}\n          value={categoryId}\n        >\n          {categories.map(({ id, color, icon, name }) => (\n            <MenuItem key={id} value={id}>\n              <>\n                <Icon color={color} icon={icon} />\n                {opened && name}\n              </>\n            </MenuItem>\n          ))}\n          <MenuItem value={51}>Clear</MenuItem>\n        </Select>\n      </div>\n      <div className=\"AppSwitches\">\n        {completedTasksSwitches.map(({ checked, onChange, title }, index) => (\n          <div key={index}>\n            <span>{title}</span>\n            <Switch\n              checked={checked}\n              onChange={onChange}\n              color=\"default\"\n              name=\"checkedB\"\n              inputProps={{ 'aria-label': 'checkbox with default color' }}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Filter;\n","/home/alexandr/ToDoList/alexandr-testwork/src/hooks/ListHook.tsx",["208","209"],"import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getTasksFromState,\n  getCategoriesFromState,\n  getIsFetching,\n  getEndNumber,\n  getDoneTasksFromState,\n} from '../redux/selectors/selectors';\nimport { getDefaultCategory, getCategories } from '../redux/actions';\nimport { useHistory } from 'react-router-dom';\n\nconst ListHook = () => {\n  const history = useHistory();\n\n  const dispatch = useDispatch();\n  const tasks = useSelector(getDoneTasksFromState);\n\n  const unDoneTasks = useSelector(getTasksFromState);\n  const categories = useSelector(getCategoriesFromState);\n  const isFetching = useSelector(getIsFetching);\n  const endNumber = useSelector(getEndNumber);\n\n  useEffect(() => {\n    dispatch(getCategories());\n    dispatch(getDefaultCategory());\n  }, []);\n\n  return {\n    tasks,\n    unDoneTasks,\n    categories,\n    isFetching,\n    dispatch,\n    endNumber,\n    history,\n  };\n};\n\nexport default ListHook;\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/Preloader/Preloader.tsx",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/Preloader/Preloader.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskButton.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/navTabs.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/AppNavbar.tsx",["210"],"import React from 'react';\nimport { useStyles } from './AppNavbar.styles';\nimport { NavLink } from 'react-router-dom';\nimport { navTabs } from './utils/navTabs';\n\nexport const AppNavbar = () => {\n  const classes = useStyles();\n\n  return (\n    <nav className={classes.navbar}>\n      <div className={classes.navbarContainer}>\n        {navTabs.map(({ to, title }) => (\n          <NavLink className={classes.navLinks} to={to} key={to}>\n            {title}\n          </NavLink>\n        ))}\n      </div>\n    </nav>\n  );\n};\n","/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskList.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/components/TaskItem.styles.ts",[],"/home/alexandr/ToDoList/alexandr-testwork/src/utils/validators/validators.ts",[],{"ruleId":"211","severity":1,"message":"212","line":116,"column":40,"nodeType":"213","messageId":"214","endLine":116,"endColumn":42},{"ruleId":"215","severity":1,"message":"216","line":25,"column":13,"nodeType":"213","messageId":"217","endLine":25,"endColumn":36},{"ruleId":"215","severity":1,"message":"216","line":32,"column":3,"nodeType":"218","messageId":"217","endLine":32,"endColumn":25},{"ruleId":"215","severity":1,"message":"216","line":36,"column":12,"nodeType":"213","messageId":"217","endLine":36,"endColumn":49},{"ruleId":"215","severity":1,"message":"216","line":39,"column":15,"nodeType":"213","messageId":"217","endLine":39,"endColumn":52},{"ruleId":"215","severity":1,"message":"216","line":47,"column":23,"nodeType":"213","messageId":"217","endLine":47,"endColumn":74},{"ruleId":"215","severity":1,"message":"216","line":53,"column":18,"nodeType":"213","messageId":"217","endLine":53,"endColumn":23},{"ruleId":"215","severity":1,"message":"216","line":58,"column":23,"nodeType":"213","messageId":"217","endLine":58,"endColumn":28},{"ruleId":"215","severity":1,"message":"216","line":63,"column":19,"nodeType":"213","messageId":"217","endLine":63,"endColumn":34},{"ruleId":"215","severity":1,"message":"216","line":65,"column":19,"nodeType":"213","messageId":"217","endLine":65,"endColumn":69},{"ruleId":"215","severity":1,"message":"216","line":69,"column":26,"nodeType":"213","messageId":"217","endLine":69,"endColumn":53},{"ruleId":"215","severity":1,"message":"216","line":73,"column":16,"nodeType":"213","messageId":"217","endLine":73,"endColumn":61},{"ruleId":"219","replacedBy":"220"},{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","severity":1,"message":"224","line":10,"column":29,"nodeType":"225","messageId":"226","endLine":10,"endColumn":32,"suggestions":"227"},{"ruleId":"228","severity":1,"message":"229","line":37,"column":6,"nodeType":"230","endLine":37,"endColumn":8,"suggestions":"231"},{"ruleId":"215","severity":1,"message":"216","line":3,"column":34,"nodeType":"213","messageId":"217","endLine":3,"endColumn":58},{"ruleId":"215","severity":1,"message":"216","line":4,"column":38,"nodeType":"213","messageId":"217","endLine":4,"endColumn":62},{"ruleId":"215","severity":1,"message":"216","line":6,"column":31,"nodeType":"213","messageId":"217","endLine":6,"endColumn":55},{"ruleId":"215","severity":1,"message":"216","line":8,"column":35,"nodeType":"213","messageId":"217","endLine":8,"endColumn":59},{"ruleId":"215","severity":1,"message":"216","line":10,"column":39,"nodeType":"213","messageId":"217","endLine":10,"endColumn":63},{"ruleId":"215","severity":1,"message":"216","line":12,"column":39,"nodeType":"213","messageId":"217","endLine":12,"endColumn":63},{"ruleId":"215","severity":1,"message":"216","line":13,"column":30,"nodeType":"213","messageId":"217","endLine":13,"endColumn":54},{"ruleId":"215","severity":1,"message":"216","line":14,"column":40,"nodeType":"213","messageId":"217","endLine":14,"endColumn":64},{"ruleId":"215","severity":1,"message":"216","line":16,"column":34,"nodeType":"213","messageId":"217","endLine":16,"endColumn":58},{"ruleId":"215","severity":1,"message":"216","line":17,"column":29,"nodeType":"213","messageId":"217","endLine":17,"endColumn":53},{"ruleId":"228","severity":1,"message":"232","line":86,"column":6,"nodeType":"230","endLine":86,"endColumn":8,"suggestions":"233"},{"ruleId":"228","severity":1,"message":"234","line":106,"column":6,"nodeType":"230","endLine":106,"endColumn":61,"suggestions":"235"},{"ruleId":"215","severity":1,"message":"216","line":6,"column":13,"nodeType":"213","messageId":"217","endLine":6,"endColumn":18},{"ruleId":"236","severity":1,"message":"237","line":2,"column":10,"nodeType":"238","messageId":"239","endLine":2,"endColumn":14},{"ruleId":"228","severity":1,"message":"240","line":36,"column":6,"nodeType":"230","endLine":36,"endColumn":13,"suggestions":"241"},{"ruleId":"236","severity":1,"message":"242","line":25,"column":20,"nodeType":"238","messageId":"239","endLine":25,"endColumn":31},{"ruleId":"236","severity":1,"message":"243","line":16,"column":10,"nodeType":"238","messageId":"239","endLine":16,"endColumn":19},{"ruleId":"236","severity":1,"message":"244","line":1,"column":22,"nodeType":"238","messageId":"239","endLine":1,"endColumn":32},{"ruleId":"236","severity":1,"message":"245","line":2,"column":8,"nodeType":"238","messageId":"239","endLine":2,"endColumn":14},{"ruleId":"236","severity":1,"message":"246","line":34,"column":9,"nodeType":"238","messageId":"239","endLine":34,"endColumn":16},{"ruleId":"215","severity":1,"message":"216","line":13,"column":18,"nodeType":"213","messageId":"217","endLine":13,"endColumn":23},{"ruleId":"228","severity":1,"message":"229","line":27,"column":6,"nodeType":"230","endLine":27,"endColumn":8,"suggestions":"247"},{"ruleId":"215","severity":1,"message":"216","line":6,"column":26,"nodeType":"213","messageId":"217","endLine":6,"endColumn":31},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","missingReturnType","FunctionExpression","no-native-reassign",["248"],"no-negated-in-lhs",["249"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["250","251"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["252"],"React Hook useEffect has a missing dependency: 'parsed._sort'. Either include it or remove the dependency array.",["253"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'isListDone', and 'locationPath.pathname'. Either include them or remove the dependency array.",["254"],"@typescript-eslint/no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'isListDone'. Either include it or remove the dependency array. If 'setSortTasks' needs the current value of 'isListDone', you can also switch to useReducer instead of useState and read 'isListDone' in the reducer.",["255"],"'setTaskDate' is assigned a value but never used.","'maxLength' is defined but never used.","'withStyles' is defined but never used.","'Button' is defined but never used.","'classes' is assigned a value but never used.",["256"],"no-global-assign","no-unsafe-negation",{"messageId":"257","fix":"258","desc":"259"},{"messageId":"260","fix":"261","desc":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"263","fix":"271"},"suggestUnknown",{"range":"272","text":"273"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"272","text":"274"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.","Update the dependencies array to be: [dispatch]",{"range":"275","text":"276"},"Update the dependencies array to be: [parsed._sort]",{"range":"277","text":"278"},"Update the dependencies array to be: [dateSort, nameSort, categoryId, end, dateFrom, dateTo, history, locationPath.pathname, dispatch, isListDone]",{"range":"279","text":"280"},"Update the dependencies array to be: [isListDone, tasks]",{"range":"281","text":"282"},{"range":"283","text":"276"},[404,407],"unknown","never",[1361,1363],"[dispatch]",[2670,2672],"[parsed._sort]",[3249,3304],"[dateSort, nameSort, categoryId, end, dateFrom, dateTo, history, locationPath.pathname, dispatch, isListDone]",[1024,1031],"[isListDone, tasks]",[808,810]]