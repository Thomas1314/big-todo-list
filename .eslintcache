[{"/home/alexandr/to-do-list/alexandr-testwork/src/index.js":"1","/home/alexandr/to-do-list/alexandr-testwork/src/App.js":"2","/home/alexandr/to-do-list/alexandr-testwork/src/redux/store.js":"3","/home/alexandr/to-do-list/alexandr-testwork/src/components/List.js":"4","/home/alexandr/to-do-list/alexandr-testwork/src/components/TaskInput.js":"5","/home/alexandr/to-do-list/alexandr-testwork/src/redux/reducers/reducer.js":"6","/home/alexandr/to-do-list/alexandr-testwork/src/redux/actions.js":"7","/home/alexandr/to-do-list/alexandr-testwork/src/redux/types.js":"8","/home/alexandr/to-do-list/alexandr-testwork/src/api/api.js":"9","/home/alexandr/to-do-list/alexandr-testwork/src/hooks/ListHook.js":"10","/home/alexandr/to-do-list/alexandr-testwork/src/redux/selectors/selectors.js":"11","/home/alexandr/to-do-list/alexandr-testwork/src/components/Icon/icon.js":"12","/home/alexandr/to-do-list/alexandr-testwork/src/components/TaskItem/TaskItem.js":"13","/home/alexandr/to-do-list/alexandr-testwork/src/components/TaskItem/taskButton.js":"14","/home/alexandr/to-do-list/alexandr-testwork/src/utils/links.js":"15","/home/alexandr/to-do-list/alexandr-testwork/src/pages/Main/Main.js":"16","/home/alexandr/to-do-list/alexandr-testwork/src/pages/CompletedTasks/CompletedTasks.js":"17","/home/alexandr/to-do-list/alexandr-testwork/src/utils/routes.js":"18"},{"size":355,"mtime":1620742833837,"results":"19","hashOfConfig":"20"},{"size":1387,"mtime":1620988795502,"results":"21","hashOfConfig":"20"},{"size":201,"mtime":1620719960617,"results":"22","hashOfConfig":"20"},{"size":546,"mtime":1620988813322,"results":"23","hashOfConfig":"20"},{"size":3395,"mtime":1620995158605,"results":"24","hashOfConfig":"20"},{"size":3215,"mtime":1620994226151,"results":"25","hashOfConfig":"20"},{"size":2664,"mtime":1620997817388,"results":"26","hashOfConfig":"20"},{"size":219,"mtime":1620713614992,"results":"27","hashOfConfig":"20"},{"size":1603,"mtime":1620997734738,"results":"28","hashOfConfig":"20"},{"size":734,"mtime":1620908617131,"results":"29","hashOfConfig":"20"},{"size":456,"mtime":1620898768934,"results":"30","hashOfConfig":"20"},{"size":268,"mtime":1620991416388,"results":"31","hashOfConfig":"20"},{"size":3501,"mtime":1620978401292,"results":"32","hashOfConfig":"20"},{"size":263,"mtime":1620978345539,"results":"33","hashOfConfig":"20"},{"size":238,"mtime":1620985646479,"results":"34","hashOfConfig":"20"},{"size":432,"mtime":1620916000931,"results":"35","hashOfConfig":"20"},{"size":950,"mtime":1620985389988,"results":"36","hashOfConfig":"20"},{"size":363,"mtime":1620986471130,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"1jh66eh",{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"41"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"41"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"41"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"41"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"/home/alexandr/to-do-list/alexandr-testwork/src/index.js",["86"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n\n",["87","88"],"/home/alexandr/to-do-list/alexandr-testwork/src/App.js",["89","90","91","92"],"import React, { Fragment } from 'react';\nimport TaskInput from './components/TaskInput';\nimport List from './components/List';\nimport { Paper, Grid, Tabs, Tab, Hidden } from \"@material-ui/core\";\nimport { BrowserRouter as Router, NavLink, Switch, Route } from 'react-router-dom';\nimport navLinks from './utils/links';\nimport routes from './utils/routes';\n\nconst styles = {\n  Paper: {\n    padding: 20,\n    margin: \"auto\", \n    textAlign: \"center\",\n    width: 500\n  }\n};\n\nconst App = () => {\n  \n  return (\n    <Router>\n      <nav className='navbar'>\n        <div className='navbar_container'>\n          {navLinks.map(({ to, title}) => (\n            <NavLink className='nav_links' to={to} key={to}>\n              {title}\n            </NavLink>\n          ))}\n        </div>\n      </nav>\n      <div>\n        <Switch>\n          {routes.map(({ path, component }) => ( \n            <Route key={path} exact path={path} component={component} />\n          ))}\n        </Switch>\n      </div>\n        <Grid container spacing={0}>\n            <Grid item xs={12}>\n              <Paper style={styles.Paper}>\n                <TaskInput />\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} style={styles.Paper}>\n              <Grid container>\n                <List />\n              </Grid>        \n            </Grid>\n        </Grid>\n    </Router>\n    );\n}\n  \n export default App;\n","/home/alexandr/to-do-list/alexandr-testwork/src/redux/store.js",[],"/home/alexandr/to-do-list/alexandr-testwork/src/components/List.js",["93","94","95","96"],"import React, { useEffect, useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport TaskItem from \"./TaskItem/TaskItem\";\nimport { useSelector } from 'react-redux';\nimport ListHook from '../hooks/ListHook';\n\nconst List = ({ isListDone }) => {\n    const { tasks, categories } = ListHook();\n\n    //debugger;\n    return (\n        <Grid container>\n            {tasks.map((task) => {\n                return <TaskItem key={task.id} task={task} isListDone={isListDone}/>\n            })}\n        </Grid>\n    )\n}\n\n\nexport default List;\n\n\n\n","/home/alexandr/to-do-list/alexandr-testwork/src/components/TaskInput.js",["97","98"],"import React, { useEffect, useState } from 'react';\nimport Input from \"@material-ui/core/Input\";\nimport Button from \"@material-ui/core/Button\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { addTask, actions } from '../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ListHook from '../hooks/ListHook';\nimport { getCategoriesFromState, getNewTaskText, selectDefaultCategoryID } from '../redux/selectors/selectors';\nimport { Select } from '@material-ui/core';\nimport { Icon } from '../components/Icon/icon';\n\n\n\n\n const TaskInput = () => {\n    \n    const newTaskText = useSelector(getNewTaskText);\n     const categories = useSelector(getCategoriesFromState);\n     const categoryID = useSelector(selectDefaultCategoryID);\n     const [open, setOpen] = useState(false);\n     const [category, setCategory] = useState(categoryID);\n     const [taskDate, setTaskDate] = useState(new Date(Date.now()));\n     const dispatch = useDispatch();\n\n     useEffect(() => {\n         setCategory(categoryID);\n     }, [categoryID]); \n\n     const onOpen = () => {\n         setOpen(true);\n     }\n\n     const onClose = () => {\n         setOpen(false);\n     }\n\n     const newTaskParams = {\n         title: newTaskText,\n         isDone: false,\n         isEdit: false,\n         categoryID: categoryID,\n         isFavorite: false,\n         date: taskDate.valueOf()\n     }\n                   \n     const addHandleEnter = (event) => {\n         if (newTaskText && newTaskText.length < 30 && event.key === 'Enter') {\n             dispatch(addTask(newTaskParams)                                                                                         )\n         }\n     }\n\n     const inputChange = event => {\n        const { value } = event.target;\n        const text = value;\n        dispatch(actions.updateNewMessageText(text));\n     }\n\n     const handleChangeCategory = (event) => {\n         dispatch(actions.setCategory(event.target.value));\n     }\n\n     //debugger;\n     return (\n        <div className='todo_form'>\n            <Input\n            value={newTaskText}\n            onChange={inputChange}\n            onKeyPress={addHandleEnter}\n            placeholder='Todo'\n            style={{ width: \"90%\" }}\n            />\n        {/* { category !== null ? */}\n            <Select onOpen={onOpen}\n                    onClose={onClose}\n                    onChange={handleChangeCategory}\n                    value={category}\n            >\n                    {\n                        categories.map(({ id, color, icon, name}) => (\n                            <MenuItem key={id} value={id}>\n                                <>\n                                    <Icon color={color} icon={icon} />\n                                    {open && name}\n                                </>\n    \n                            </MenuItem>\n                        ))\n                    }\n            </Select> {/* : null } */}\n\n            <Button \n            type=\"submit\"\n            disabled={newTaskText.length === 0 || newTaskText.length > 30}\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ width: \"10%\" }}\n            onClick={() => {\n                newTaskText && newTaskText.length < 30 && dispatch(addTask(newTaskParams));\n            }}\n            >\n                Add\n            </Button>\n        </div>\n    );\n }\n\n\nexport default TaskInput;","/home/alexandr/to-do-list/alexandr-testwork/src/redux/reducers/reducer.js",[],"/home/alexandr/to-do-list/alexandr-testwork/src/redux/actions.js",["99"],"/home/alexandr/to-do-list/alexandr-testwork/src/redux/types.js",[],["100","101"],"/home/alexandr/to-do-list/alexandr-testwork/src/api/api.js",[],"/home/alexandr/to-do-list/alexandr-testwork/src/hooks/ListHook.js",["102","103","104"],"import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTasksFromState, getCategoriesFromState, getIsFetching } from '../redux/selectors/selectors';\nimport { getDefaultCategory, getCategories } from '../redux/actions';\n\nconst ListHook = () => {\n    const dispatch = useDispatch();\n    const tasks = useSelector(getTasksFromState);\n    const categories = useSelector(getCategoriesFromState);\n    const isFetching = useSelector(getIsFetching);\n\n    useEffect(() => {\n        dispatch(getCategories());\n        dispatch(getDefaultCategory());\n    }, [])\n\n    return {\n        tasks,\n        categories,\n        isFetching,\n        dispatch\n    }\n}\n\nexport default ListHook;","/home/alexandr/to-do-list/alexandr-testwork/src/redux/selectors/selectors.js",[],"/home/alexandr/to-do-list/alexandr-testwork/src/components/Icon/icon.js",["105","106"],"import React from 'react';\n\nconst color = \"yellowgreen\" | \"yellow\" | \"black\" | \"\" ;\nconst icon = \"anchor\" | \"home\" | \"thumb_up\" | \"\" ;\n\nexport const Icon = ({ icon, color }) => {\n    return <span className='material-icons' style={{color}}>\n        {icon}\n    </span>\n}","/home/alexandr/to-do-list/alexandr-testwork/src/components/TaskItem/TaskItem.js",["107","108","109","110","111","112"],"import React, { useState } from \"react\";\nimport { Grid, Paper, Button, TextField } from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Icon from '@material-ui/core/Icon';\nimport { Delete, Build, Star } from \"@material-ui/icons\";\nimport { Input } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions,\n         deleteTask,\n         updateDoneHandler,\n         updateTaskText,\n         updateFavoriteHandler \n} from \"../../redux/actions\";\nimport { getChangedTaskText, getIsEditStatus } from '../../redux/selectors/selectors';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { StyledButton } from './taskButton';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\n\nconst styles = {\n    Icon: {\n      marginLeft: \"auto\"\n    },\n    Paper: {\n      margin: \"auto\",\n      padding: 10,\n      display: \"flex\",\n      alignItems: \"center\",\n      marginTop: 10,\n      width: 500\n    }\n  };\n\n\nconst TaskItem = ({ task, categories, isListDone }) => {\n\n\n  const dispatch = useDispatch();\n\n  const changedTaskText = useSelector(getChangedTaskText);\n  const isEditStatus = useSelector(getIsEditStatus);\n\n  const changeTaskHandler = () => {\n    dispatch(actions.changeHandler);\n    dispatch(actions.updateIsEditStatus())\n  }\n\n  const updateTaskParams = {\n    title: changedTaskText,\n    id: task.id\n  };\n\n    const editHandleEnter = (event, updateTaskParams) => {\n    if (event.key === 'Enter') {\n      dispatch(updateTaskText(updateTaskParams));\n      dispatch(actions.updateIsEditStatus());\n    }\n  }\n\n  const updateDone = {\n    isDone: !task.isDone,\n    id: task.id,\n    isListDone: isListDone\n  };\n\n  const updateCategoryHandler = () => {\n    dispatch(updateDoneHandler(updateDone));\n  }\n\n  const updateFavoriteParams = {\n    isFavorite: !task.isFavorite,\n    id: task.id\n  }\n\n  const updateTaskFavorite = () => {\n    dispatch(updateFavoriteHandler(updateFavoriteParams))\n  }\n\n  const inputTextChanger = event => {\n  const { value } = event.target;\n  const text = value;\n  dispatch(actions.updateEditTaskText(text));\n  }\n\n  const deleteChosenTask = () => dispatch(deleteTask(task.id));\n\n  const enterHandler = (event) => editHandleEnter(event, updateTaskParams);\n    debugger\n    return (\n    <Grid item xs={12}>\n      <Paper elevation={2} style={styles.Paper}>\n\n        <Checkbox onClick={updateCategoryHandler} />\n        {task.isEdit\n                ? <TextField\n                  value={changedTaskText}\n                  onChange={inputTextChanger}\n                  key={task.id + 1}\n                  onKeyPress={enterHandler}\n                  />\n                : isEditStatus\n                  ? (<span>{task.title}</span>)\n                  : (<span onClick={changeTaskHandler}>{task.title}</span>) \n            }\n          <IconButton\n            color=\"primary\"\n            aria-label=\"Edit\"\n            style={styles.Icon}\n            >\n             {/* <Build fontSize=\"small\" /> */}\n          </IconButton>\n\n          <StyledButton className=\"material-icons\" onClick={updateTaskFavorite}>\n            {task.isFavorite ?  <StarIcon /> : <StarBorderIcon /> }\n          </StyledButton>\n        \n          <IconButton\n            color=\"secondary\"\n            aria-label=\"Delete\"\n            onClick={deleteChosenTask}\n          >\n            <Delete fontSize=\"small\" />\n          </IconButton>\n\n      </Paper>\n    </Grid>\n    )\n}\n\nexport default TaskItem;","/home/alexandr/to-do-list/alexandr-testwork/src/components/TaskItem/taskButton.js",[],["113","114"],"/home/alexandr/to-do-list/alexandr-testwork/src/utils/links.js",[],"/home/alexandr/to-do-list/alexandr-testwork/src/pages/Main/Main.js",["115","116","117","118","119"],"import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\n\nconst Main = () => {\n    return (\n        <div>\n            <div className='main_title'>\n                <h1>Main</h1>\n            </div>\n            <div className='main_list'>\n                <div className='main_task_creator'>\n                    \n                </div>\n            </div>\n\n        </div>\n        \n    )\n}\n","/home/alexandr/to-do-list/alexandr-testwork/src/pages/CompletedTasks/CompletedTasks.js",["120"],"import React, { useState } from 'react';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\n/* import LocalizationProvider from '@material-ui/lab/LocalizationProvider'; */\nimport List from '../../components/List';\n\nconst CompletedTasks = () => {\n    return (\n        <div className='container'>\n            <h1>Completed Tasks</h1>\n            <div className='comleted_list'>\n                <div>\n                    <MuiPickersUtilsProvider>\n                        <KeyboardDatePicker\n                            margin=\"normal\"\n                            format=\"yyyy-MM-dd\" \n                        />\n                    </MuiPickersUtilsProvider>\n\n                    <MuiPickersUtilsProvider>\n                        <KeyboardDatePicker />\n                    </MuiPickersUtilsProvider>\n                </div>\n                <List />\n            </div>\n        </div>\n    )\n}\n\nexport default CompletedTasks;","/home/alexandr/to-do-list/alexandr-testwork/src/utils/routes.js",[],{"ruleId":"121","severity":1,"message":"122","line":7,"column":10,"nodeType":"123","messageId":"124","endLine":7,"endColumn":23},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"121","severity":1,"message":"129","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},{"ruleId":"121","severity":1,"message":"130","line":4,"column":23,"nodeType":"123","messageId":"124","endLine":4,"endColumn":27},{"ruleId":"121","severity":1,"message":"131","line":4,"column":29,"nodeType":"123","messageId":"124","endLine":4,"endColumn":32},{"ruleId":"121","severity":1,"message":"132","line":4,"column":34,"nodeType":"123","messageId":"124","endLine":4,"endColumn":40},{"ruleId":"121","severity":1,"message":"133","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":26},{"ruleId":"121","severity":1,"message":"134","line":1,"column":28,"nodeType":"123","messageId":"124","endLine":1,"endColumn":36},{"ruleId":"121","severity":1,"message":"135","line":4,"column":10,"nodeType":"123","messageId":"124","endLine":4,"endColumn":21},{"ruleId":"121","severity":1,"message":"136","line":8,"column":20,"nodeType":"123","messageId":"124","endLine":8,"endColumn":30},{"ruleId":"121","severity":1,"message":"137","line":7,"column":8,"nodeType":"123","messageId":"124","endLine":7,"endColumn":16},{"ruleId":"121","severity":1,"message":"138","line":22,"column":23,"nodeType":"123","messageId":"124","endLine":22,"endColumn":34},{"ruleId":"121","severity":1,"message":"139","line":62,"column":11,"nodeType":"123","messageId":"124","endLine":62,"endColumn":19},{"ruleId":"125","replacedBy":"140"},{"ruleId":"127","replacedBy":"141"},{"ruleId":"121","severity":1,"message":"142","line":1,"column":8,"nodeType":"123","messageId":"124","endLine":1,"endColumn":13},{"ruleId":"121","severity":1,"message":"134","line":1,"column":28,"nodeType":"123","messageId":"124","endLine":1,"endColumn":36},{"ruleId":"143","severity":1,"message":"144","line":15,"column":8,"nodeType":"145","endLine":15,"endColumn":10,"suggestions":"146"},{"ruleId":"121","severity":1,"message":"147","line":3,"column":7,"nodeType":"123","messageId":"124","endLine":3,"endColumn":12},{"ruleId":"121","severity":1,"message":"148","line":4,"column":7,"nodeType":"123","messageId":"124","endLine":4,"endColumn":11},{"ruleId":"121","severity":1,"message":"134","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},{"ruleId":"121","severity":1,"message":"149","line":2,"column":23,"nodeType":"123","messageId":"124","endLine":2,"endColumn":29},{"ruleId":"121","severity":1,"message":"150","line":4,"column":8,"nodeType":"123","messageId":"124","endLine":4,"endColumn":12},{"ruleId":"121","severity":1,"message":"151","line":5,"column":18,"nodeType":"123","messageId":"124","endLine":5,"endColumn":23},{"ruleId":"121","severity":1,"message":"152","line":5,"column":25,"nodeType":"123","messageId":"124","endLine":5,"endColumn":29},{"ruleId":"121","severity":1,"message":"153","line":6,"column":10,"nodeType":"123","messageId":"124","endLine":6,"endColumn":15},{"ruleId":"125","replacedBy":"154"},{"ruleId":"127","replacedBy":"155"},{"ruleId":"121","severity":1,"message":"133","line":1,"column":16,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},{"ruleId":"121","severity":1,"message":"134","line":1,"column":27,"nodeType":"123","messageId":"124","endLine":1,"endColumn":35},{"ruleId":"121","severity":1,"message":"156","line":2,"column":9,"nodeType":"123","messageId":"124","endLine":2,"endColumn":20},{"ruleId":"121","severity":1,"message":"135","line":2,"column":22,"nodeType":"123","messageId":"124","endLine":2,"endColumn":33},{"ruleId":"121","severity":1,"message":"157","line":5,"column":7,"nodeType":"123","messageId":"124","endLine":5,"endColumn":11},{"ruleId":"121","severity":1,"message":"134","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["158"],"no-negated-in-lhs",["159"],"'Fragment' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'Hidden' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useSelector' is defined but never used.","'categories' is assigned a value but never used.","'ListHook' is defined but never used.","'setTaskDate' is assigned a value but never used.","'response' is assigned a value but never used.",["158"],["159"],"'React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["160"],"'color' is assigned a value but never used.","'icon' is assigned a value but never used.","'Button' is defined but never used.","'Icon' is defined but never used.","'Build' is defined but never used.","'Star' is defined but never used.","'Input' is defined but never used.",["158"],["159"],"'useDispatch' is defined but never used.","'Main' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},"Update the dependencies array to be: [dispatch]",{"range":"163","text":"164"},[611,613],"[dispatch]"]